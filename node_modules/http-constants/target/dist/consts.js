'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* global */

/**
 * @typedef {Object} CONSTSCODES
 */

/**
 * Continue
 *
 * This means that the server has received the request headers, and that the client should proceed to send the request body (in the case of a request for which a body needs to be sent, for example, a POST request). If the request body is large, sending it to a server when a request has already been rejected based upon inappropriate headers is inefficient. To have a server check if the request could be accepted based on the request's headers alone, a client must send Expect: 100-continue as a header in its initial request and check if a 100 Continue status code is received in response before continuing (or receive 417 Expectation Failed and not continue).[6]
 * @type {Number}
 */
const CONTINUE = 100;

/**
 * Switching Protocols
 *
 * This means the requester has asked the server to switch protocols and the server is acknowledging that it will do so.[7]
 * @type {Number}
 */
const SWITCHING_PROTOCOLS = 101;

/**
 * Processing (WebDAV, RFC 2518)
 *
 * As a WebDAV request may contain many sub-requests involving file operations, it may take a long time to complete the request. This code indicates that the server has received and is processing the request, but no response is available yet.[8] This prevents the client from timing out and assuming the request was lost.
 * @type {Number}
 */
const PROCESSING = 102;

/**
 * OK
 *
 * Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request, the response will contain an entity describing or containing the result of the action.[10]
 * @type {Number}
 */
const OK = 200;

/**
 * Created
 *
 * The request has been fulfilled and resulted in a new resource being created.[11]
 * @type {Number}
 */
const CREATED = 201;

/**
 * Accepted
 *
 * The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.[12]
 * @type {Number}
 */
const ACCEPTED = 202;

/**
 * Non-Authoritative Information (since HTTP/1.1)
 *
 * The server successfully processed the request, but is returning information that may be from another source.[13]
 * @type {Number}
 */
const NON_AUTHORITATIVE_INFORMATION = 203;

/**
 * No Content
 *
 * The server successfully processed the request, but is not returning any content.[14]
 * @type {Number}
 */
const NO_CONTENT = 204;

/**
 * Reset Content
 *
 * The server successfully processed the request, but is not returning any content. Unlike a 204 response, this response requires that the requester reset the document view.[15]
 * @type {Number}
 */
const RESET_CONTENT = 205;

/**
 * Partial Content (RFC 7233)
 *
 * The server is delivering only part of the resource (byte serving) due to a range header sent by the client. The range header is used by HTTP clients to enable resuming of interrupted downloads, or split a download into multiple simultaneous streams.[16]
 * @type {Number}
 */
const PARTIAL_CONTENT = 206;

/**
 * Multi-Status (WebDAV, RFC 4918)
 *
 * The message body that follows is an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.[17]
 * @type {Number}
 */
const MULTI_STATUS = 207;

/**
 * Already Reported (WebDAV, RFC 5842)
 *
 * The members of a DAV binding have already been enumerated in a previous reply to this request, and are not being included again.[18]
 * @type {Number}
 */
const ALREADY_REPORTED = 208;

/**
 * IM Used (RFC 3229)
 *
 * The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.[19]
 * @type {Number}
 */
const IM_USED = 226;

/**
 * Multiple Choices
 *
 * Indicates multiple options for the resource that the client may follow. It, for instance, could be used to present different format options for video, list files with different extensions, or word sense disambiguation.[22]
 * @type {Number}
 */
const MULTIPLE_CHOICES = 300;

/**
 * Moved Permanently
 *
 * This and all future requests should be directed to the given URI.[23]
 * @type {Number}
 */
const MOVED_PERMANENTLY = 301;

/**
 * Found
 *
 * This is an example of industry practice contradicting the standard. The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect (the original describing phrase was "Moved Temporarily"),[24] but popular browsers implemented 302 with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307 to distinguish between the two behaviours.[25] However, some Web applications and frameworks use the 302 status code as if it were the 303.[26]
 * @type {Number}
 */
const FOUND = 302;

/**
 * See Other (since HTTP/1.1)
 *
 * The response to the request can be found under another URI using a GET method. When received in response to a POST (or PUT/DELETE), it should be assumed that the server has received the data and the redirect should be issued with a separate GET message.[27]
 * @type {Number}
 */
const SEE_OTHER = 303;

/**
 * Not Modified (RFC 7232)
 *
 * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match. This means that there is no need to retransmit the resource, since the client still has a previously-downloaded copy.[28]
 * @type {Number}
 */
const NOT_MODIFIED = 304;

/**
 * Use Proxy (since HTTP/1.1)
 *
 * The requested resource is only available through a proxy, whose address is provided in the response. Many HTTP clients (such as Mozilla[29] and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.[30]
 * @type {Number}
 */
const USE_PROXY = 305;

/**
 * Switch Proxy
 *
 * No longer used. Originally meant "Subsequent requests should use the specified proxy."[31]
 * @type {Number}
 */
const SWITCH_PROXY = 306;

/**
 * Temporary Redirect (since HTTP/1.1)
 *
 * In this case, the request should be repeated with another URI, however, future requests should still use the original URI. In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request. For instance, a POST request should be repeated using another POST request.[32]
 * @type {Number}
 */
const TEMPORARY_REDIRECT = 307;

/**
 * Permanent Redirect (RFC 7538)
 *
 * The request, and all future requests should be repeated using another URI. 307 and 308 (as proposed) parallel the behaviours of 302 and 301, but do not allow the HTTP method to change. So, for example, submitting a form to a permanently redirected resource may continue smoothly.[33]
 * @type {Number}
 */
const PERMANENT_REDIRECT = 308;

/**
 * Resume Incomplete (Google)
 *
 * This code is used in the Resumable HTTP Requests Proposal to resume aborted PUT or POST requests.[34]
 * @type {Number}
 */
const RESUME_INCOMPLETE = 308;

/**
 * Bad Request
 *
 * The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).[36]
 * @type {Number}
 */
const BAD_REQUEST = 400;

/**
 * Unauthorized (RFC 7235)
 *
 * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource. See Basic access authentication and Digest access authentication.[37]
 * @type {Number}
 */
const UNAUTHORIZED = 401;

/**
 * Payment Required
 *
 * Reserved for future use. The original intention was that this code might be used as part of some form of digital cash or micropayment scheme, but that has not happened, and this code is not usually used. Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.[38]
 * @type {Number}
 */
const PAYMENT_REQUIRED = 402;

/**
 * Forbidden
 *
 * The request was a valid request, but the server is refusing to respond to it. Unlike a 401 Unauthorized response, authenticating will make no difference.[39]
 * @type {Number}
 */
const FORBIDDEN = 403;

/**
 * Not Found
 *
 * The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible.[40]
 * @type {Number}
 */
const NOT_FOUND = 404;

/**
 * Method Not Allowed
 *
 * A request was made of a resource using a request method not supported by that resource, for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.
 * @type {Number}
 */
const METHOD_NOT_ALLOWED = 405;

/**
 * Not Acceptable
 *
 * The requested resource is only capable of generating content not acceptable according to the Accept headers sent in the request.[41]
 * @type {Number}
 */
const NOT_ACCEPTABLE = 406;

/**
 * Proxy Authentication Required (RFC 7235)
 *
 * The client must first authenticate itself with the proxy.[42]
 * @type {Number}
 */
const PROXY_AUTHENTICATION_REQUIRED = 407;

/**
 * Request Timeout
 *
 * The server timed out waiting for the request. According to HTTP specifications = "The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time."[43]
 * @type {Number}
 */
const REQUEST_TIMEOUT = 408;

/**
 * Conflict
 *
 * Indicates that the request could not be processed because of conflict in the request, such as an edit conflict in the case of multiple updates.[44]
 * @type {Number}
 */
const CONFLICT = 409;

/**
 * Gone
 *
 * Indicates that the resource requested is no longer available and will not be available again. This should be used when a resource has been intentionally removed and the resource should be purged. Upon receiving a 410 status code, the client should not request the resource again in the future. Clients such as search engines should remove the resource from their indices.[45] Most use cases do not require clients and search engines to purge the resource, and a "404 Not Found" may be used instead.
 * @type {Number}
 */
const GONE = 410;

/**
 * Length Required
 *
 * The request did not specify the length of its content, which is required by the requested resource.[46]
 * @type {Number}
 */
const LENGTH_REQUIRED = 411;

/**
 * Precondition Failed (RFC 7232)
 *
 * The server does not meet one of the preconditions that the requester put on the request.[47]
 * @type {Number}
 */
const PRECONDITION_FAILED = 412;

/**
 * Payload Too Large (RFC 7231)
 *
 * The request is larger than the server is willing or able to process. Called "Request Entity Too Large" previously.[48]
 * @type {Number}
 */
const PAYLOAD_TOO_LARGE = 413;

/**
 * URI Too Long (RFC 7231)
 *
 * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request, in which case it should be converted to a POST request.[49] Called "Request-URI Too Long" previously.[50]
 * @type {Number}
 */
const URI_TOO_LONG = 414;

/**
 * Unsupported Media Type
 *
 * The request entity has a media type which the server or resource does not support. For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.
 * @type {Number}
 */
const UNSUPPORTED_MEDIA_TYPE = 415;

/**
 * Range Not Satisfiable (RFC 7233)
 *
 * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion. For example, if the client asked for a part of the file that lies beyond the end of the file.[51] Called "Requested Range Not Satisfiable" previously.[52]
 * @type {Number}
 */
const RANGE_NOT_SATISFIABLE = 416;

/**
 * Expectation Failed
 *
 * The server cannot meet the requirements of the Expect request-header field.[53]
 * @type {Number}
 */
const EXPECTATION_FAILED = 417;

/**
 * I'm a teapot (RFC 2324)
 *
 * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol, and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by tea pots requested to brew coffee.[54] This HTTP status is used as an easter egg in some websites, including Google.com.[55]
 * @type {Number}
 */
const IM_A_TEAPOT = 418;

/**
 * Authentication Timeout (not in RFC 2616)
 *
 * Not a part of the HTTP standard, 419 Authentication Timeout denotes that previously valid authentication has expired. It is used as an alternative to 401 Unauthorized in order to differentiate from otherwise authenticated clients being denied access to specific server resources.[citation needed][56]
 * @type {Number}
 */
const AUTHENTICATION_TIMEOUT = 419;

/**
 * Method Failure (Spring Framework)
 *
 * Not part of the HTTP standard, but defined by Spring in the HttpStatus class to be used when a method failed. This status code is deprecated by Spring.[57]
 * @type {Number}
 */
const METHOD_FAILURE = 420;

/**
 * Enhance Your Calm (Twitter)
 *
 * Not part of the HTTP standard, but returned by version 1 of the Twitter Search and Trends API when the client is being rate limited.[58] Other services may wish to implement the 429 Too Many Requests response code instead.
 * @type {Number}
 */
const ENHANCE_YOUR_CALM = 420;

/**
 * Misdirected Request (RFC 7540)
 *
 * The request was directed at a server that is not able to produce a response (for example because a connection reuse).[59]
 * @type {Number}
 */
const MISDIRECTED_REQUEST = 421;

/**
 * Unprocessable Entity (WebDAV, RFC 4918)
 *
 * The request was well-formed but was unable to be followed due to semantic errors.[17]
 * @type {Number}
 */
const UNPROCESSABLE_ENTITY = 422;

/**
 * Locked (WebDAV, RFC 4918)
 *
 * The resource that is being accessed is locked.[17]
 * @type {Number}
 */
const LOCKED = 423;

/**
 * Failed Dependency (WebDAV, RFC 4918)
 *
 * The request failed due to failure of a previous request (e.g., a PROPPATCH).[17]
 * @type {Number}
 */
const FAILED_DEPENDENCY = 424;

/**
 * Upgrade Required
 *
 * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.[60]
 * @type {Number}
 */
const UPGRADE_REQUIRED = 426;

/**
 * Precondition Required (RFC 6585)
 *
 * The origin server requires the request to be conditional. Intended to prevent "the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict."[61]
 * @type {Number}
 */
const PRECONDITION_REQUIRED = 428;

/**
 * Too Many Requests (RFC 6585)
 *
 * The user has sent too many requests in a given amount of time. Intended for use with rate limiting schemes.[61]
 * @type {Number}
 */
const TOO_MANY_REQUESTS = 429;

/**
 * Request Header Fields Too Large (RFC 6585)
 *
 * The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large.[61]
 * @type {Number}
 */
const REQUEST_HEADER_FIELDS_TOO_LARGE = 431;

/**
 * Login Timeout (Microsoft)
 *
 * A Microsoft extension. Indicates that your session has expired.[62]
 * @type {Number}
 */
const LOGIN_TIMEOUT = 440;

/**
 * No Response (Nginx)
 *
 * Used in Nginx logs to indicate that the server has returned no information to the client and closed the connection (useful as a deterrent for malware).[63]
 * @type {Number}
 */
const NO_RESPONSE = 444;

/**
 * Retry With (Microsoft)
 *
 * A Microsoft extension. The request should be retried after performing the appropriate action.[64]
 * @type {Number}
 */
const RETRY_WITH = 449;

/**
 * Blocked by Windows Parental Controls (Microsoft)
 *
 * A Microsoft extension. This error is given when Windows Parental Controls are turned on and are blocking access to the given webpage.[65]
 * @type {Number}
 */
const BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS = 450;

/**
 * Unavailable For Legal Reasons (Internet draft)
 *
 * Defined in the internet draft "A New HTTP Status Code for Legally-restricted Resources".[66] Intended to be used when resource access is denied for legal reasons, e.g. censorship or government-mandated blocked access. A reference to the 1953 dystopian novel Fahrenheit 451, where books are outlawed.[67]
 * @type {Number}
 */
const UNAVAILABLE_FOR_LEGAL_REASONS = 451;

/**
 * Redirect (Microsoft)
 *
 * Used in Exchange ActiveSync if there either is a more efficient server to use or the server cannot access the users' mailbox.[68] The client is supposed to re-run the HTTP Autodiscovery protocol to find a better suited server.[69]
 * @type {Number}
 */
const REDIRECT = 451;

/**
 * Request Header Too Large (Nginx)
 *
 * Nginx internal code similar to 431 but it was introduced earlier in version 0.9.4 (on January 21, 2011).[70][original research?]
 * @type {Number}
 */
const REQUEST_HEADER_TOO_LARGE = 494;

/**
 * Cert Error (Nginx)
 *
 * Nginx internal code used when SSL client certificate error occurred to distinguish it from 4XX in a log and an error page redirection.[71]
 * @type {Number}
 */
const CERT_ERROR = 495;

/**
 * No Cert (Nginx)
 *
 * Nginx internal code used when client didn't provide certificate to distinguish it from 4XX in a log and an error page redirection.[72]
 * @type {Number}
 */
const NO_CERT = 496;

/**
 * HTTP to HTTPS (Nginx)
 *
 * Nginx internal code used for the plain HTTP requests that are sent to HTTPS port to distinguish it from 4XX in a log and an error page redirection.[73]
 * @type {Number}
 */
const HTTP_TO_HTTPS = 497;

/**
 * Token expired/invalid (Esri)
 *
 * Returned by ArcGIS for Server. A code of 498 indicates an expired or otherwise invalid token.[74]
 * @type {Number}
 */
const TOKEN_EXPIRED_INVALID = 498;

/**
 * Client Closed Request (Nginx)
 *
 * Used in Nginx logs to indicate when the connection has been closed by client while the server is still processing its request, making server unable to send a status code back.[75]
 * @type {Number}
 */
const CLIENT_CLOSED_REQUEST = 499;

/**
 * Token required (Esri)
 *
 * Returned by ArcGIS for Server. A code of 499 indicates that a token is required (if no token was submitted).[74]
 * @type {Number}
 */
const TOKEN_REQUIRED = 499;

/**
 * Internal Server Error
 *
 * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.[78]
 * @type {Number}
 */
const INTERNAL_SERVER_ERROR = 500;

/**
 * Not Implemented
 *
 * The server either does not recognize the request method, or it lacks the ability to fulfill the request. Usually this implies future availability (e.g., a new feature of a web-service API).[79]
 * @type {Number}
 */
const NOT_IMPLEMENTED = 501;

/**
 * Bad Gateway
 *
 * The server was acting as a gateway or proxy and received an invalid response from the upstream server.[80]
 * @type {Number}
 */
const BAD_GATEWAY = 502;

/**
 * Service Unavailable
 *
 * The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is a temporary state.[81]
 * @type {Number}
 */
const SERVICE_UNAVAILABLE = 503;

/**
 * Gateway Timeout
 *
 * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.[82]
 * @type {Number}
 */
const GATEWAY_TIMEOUT = 504;

/**
 * HTTP Version Not Supported
 *
 * The server does not support the HTTP protocol version used in the request.[83]
 * @type {Number}
 */
const HTTP_VERSION_NOT_SUPPORTED = 505;

/**
 * Variant Also Negotiates (RFC 2295)
 *
 * Transparent content negotiation for the request results in a circular reference.[84]
 * @type {Number}
 */
const VARIANT_ALSO_NEGOTIATES = 506;

/**
 * Insufficient Storage (WebDAV, RFC 4918)
 *
 * The server is unable to store the representation needed to complete the request.[17]
 * @type {Number}
 */
const INSUFFICIENT_STORAGE = 507;

/**
 * Loop Detected (WebDAV, RFC 5842)
 *
 * The server detected an infinite loop while processing the request (sent in lieu of 208 Already Reported).
 * @type {Number}
 */
const LOOP_DETECTED = 508;

/**
 * Bandwidth Limit Exceeded (Apache bw/limited extension)[85]
 *
 * This status code is not specified in any RFCs. Its use is unknown.
 * @type {Number}
 */
const BANDWIDTH_LIMIT_EXCEEDED = 509;

/**
 * Not Extended (RFC 2774)
 *
 * Further extensions to the request are required for the server to fulfil it.[86]
 * @type {Number}
 */
const NOT_EXTENDED = 510;

/**
 * Network Authentication Required (RFC 6585)
 *
 * The client needs to authenticate to gain network access. Intended for use by intercepting proxies used to control access to the network (e.g., "captive portals" used to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).[61]
 * @type {Number}
 */
const NETWORK_AUTHENTICATION_REQUIRED = 511;

/**
 * Unknown Error
 *
 * This status code is not specified in any RFC and is returned by certain services, for instance Microsoft Azure and CloudFlare servers = "The 520 error is essentially a "catch-all" response for when the origin server returns something unexpected or something that is not tolerated/interpreted (protocol violation or empty response)."[87]
 * @type {Number}
 */
const UNKNOWN_ERROR = 520;

/**
 * Origin Connection Time-out
 *
 * This status code is not specified in any RFCs, but is used by CloudFlare's reverse proxies to signal that a server connection timed out.
 * @type {Number}
 */
const ORIGIN_CONNECTION_TIMEOUT = 522;

/**
 * Network read timeout error (Unknown)
 *
 * This status code is not specified in any RFCs, but is used by Microsoft HTTP proxies to signal a network read timeout behind the proxy to a client in front of the proxy.[citation needed][88]
 * @type {Number}
 */
const NETWORK_READ_TIMEOUT = 598;

/**
 * Network connect timeout error (Unknown)
 *
 * This status code is not specified in any RFCs, but is used by Microsoft HTTP proxies to signal a network connect timeout behind the proxy to a client in front of the proxy.[citation needed][89]
 * @type {Number}
 */
const NETWORK_CONNECT_TIMEOUT_ERROR = 599;

var _codes = /*#__PURE__*/Object.freeze({
	CONTINUE: CONTINUE,
	SWITCHING_PROTOCOLS: SWITCHING_PROTOCOLS,
	PROCESSING: PROCESSING,
	OK: OK,
	CREATED: CREATED,
	ACCEPTED: ACCEPTED,
	NON_AUTHORITATIVE_INFORMATION: NON_AUTHORITATIVE_INFORMATION,
	NO_CONTENT: NO_CONTENT,
	RESET_CONTENT: RESET_CONTENT,
	PARTIAL_CONTENT: PARTIAL_CONTENT,
	MULTI_STATUS: MULTI_STATUS,
	ALREADY_REPORTED: ALREADY_REPORTED,
	IM_USED: IM_USED,
	MULTIPLE_CHOICES: MULTIPLE_CHOICES,
	MOVED_PERMANENTLY: MOVED_PERMANENTLY,
	FOUND: FOUND,
	SEE_OTHER: SEE_OTHER,
	NOT_MODIFIED: NOT_MODIFIED,
	USE_PROXY: USE_PROXY,
	SWITCH_PROXY: SWITCH_PROXY,
	TEMPORARY_REDIRECT: TEMPORARY_REDIRECT,
	PERMANENT_REDIRECT: PERMANENT_REDIRECT,
	RESUME_INCOMPLETE: RESUME_INCOMPLETE,
	BAD_REQUEST: BAD_REQUEST,
	UNAUTHORIZED: UNAUTHORIZED,
	PAYMENT_REQUIRED: PAYMENT_REQUIRED,
	FORBIDDEN: FORBIDDEN,
	NOT_FOUND: NOT_FOUND,
	METHOD_NOT_ALLOWED: METHOD_NOT_ALLOWED,
	NOT_ACCEPTABLE: NOT_ACCEPTABLE,
	PROXY_AUTHENTICATION_REQUIRED: PROXY_AUTHENTICATION_REQUIRED,
	REQUEST_TIMEOUT: REQUEST_TIMEOUT,
	CONFLICT: CONFLICT,
	GONE: GONE,
	LENGTH_REQUIRED: LENGTH_REQUIRED,
	PRECONDITION_FAILED: PRECONDITION_FAILED,
	PAYLOAD_TOO_LARGE: PAYLOAD_TOO_LARGE,
	URI_TOO_LONG: URI_TOO_LONG,
	UNSUPPORTED_MEDIA_TYPE: UNSUPPORTED_MEDIA_TYPE,
	RANGE_NOT_SATISFIABLE: RANGE_NOT_SATISFIABLE,
	EXPECTATION_FAILED: EXPECTATION_FAILED,
	IM_A_TEAPOT: IM_A_TEAPOT,
	AUTHENTICATION_TIMEOUT: AUTHENTICATION_TIMEOUT,
	METHOD_FAILURE: METHOD_FAILURE,
	ENHANCE_YOUR_CALM: ENHANCE_YOUR_CALM,
	MISDIRECTED_REQUEST: MISDIRECTED_REQUEST,
	UNPROCESSABLE_ENTITY: UNPROCESSABLE_ENTITY,
	LOCKED: LOCKED,
	FAILED_DEPENDENCY: FAILED_DEPENDENCY,
	UPGRADE_REQUIRED: UPGRADE_REQUIRED,
	PRECONDITION_REQUIRED: PRECONDITION_REQUIRED,
	TOO_MANY_REQUESTS: TOO_MANY_REQUESTS,
	REQUEST_HEADER_FIELDS_TOO_LARGE: REQUEST_HEADER_FIELDS_TOO_LARGE,
	LOGIN_TIMEOUT: LOGIN_TIMEOUT,
	NO_RESPONSE: NO_RESPONSE,
	RETRY_WITH: RETRY_WITH,
	BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS: BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS,
	UNAVAILABLE_FOR_LEGAL_REASONS: UNAVAILABLE_FOR_LEGAL_REASONS,
	REDIRECT: REDIRECT,
	REQUEST_HEADER_TOO_LARGE: REQUEST_HEADER_TOO_LARGE,
	CERT_ERROR: CERT_ERROR,
	NO_CERT: NO_CERT,
	HTTP_TO_HTTPS: HTTP_TO_HTTPS,
	TOKEN_EXPIRED_INVALID: TOKEN_EXPIRED_INVALID,
	CLIENT_CLOSED_REQUEST: CLIENT_CLOSED_REQUEST,
	TOKEN_REQUIRED: TOKEN_REQUIRED,
	INTERNAL_SERVER_ERROR: INTERNAL_SERVER_ERROR,
	NOT_IMPLEMENTED: NOT_IMPLEMENTED,
	BAD_GATEWAY: BAD_GATEWAY,
	SERVICE_UNAVAILABLE: SERVICE_UNAVAILABLE,
	GATEWAY_TIMEOUT: GATEWAY_TIMEOUT,
	HTTP_VERSION_NOT_SUPPORTED: HTTP_VERSION_NOT_SUPPORTED,
	VARIANT_ALSO_NEGOTIATES: VARIANT_ALSO_NEGOTIATES,
	INSUFFICIENT_STORAGE: INSUFFICIENT_STORAGE,
	LOOP_DETECTED: LOOP_DETECTED,
	BANDWIDTH_LIMIT_EXCEEDED: BANDWIDTH_LIMIT_EXCEEDED,
	NOT_EXTENDED: NOT_EXTENDED,
	NETWORK_AUTHENTICATION_REQUIRED: NETWORK_AUTHENTICATION_REQUIRED,
	UNKNOWN_ERROR: UNKNOWN_ERROR,
	ORIGIN_CONNECTION_TIMEOUT: ORIGIN_CONNECTION_TIMEOUT,
	NETWORK_READ_TIMEOUT: NETWORK_READ_TIMEOUT,
	NETWORK_CONNECT_TIMEOUT_ERROR: NETWORK_CONNECT_TIMEOUT_ERROR
});

/* globals */

/**
 * @typedef {Object} CONSTSHEADERSREQUEST
 */

/**
 * Content-Types that are acceptable for the response. See Content negotiation. Permanent.
 * Examples:
 * <code>Accept: text/plain</code>
 * @type {String}
 */
const ACCEPT = 'Accept';

/**
 * Character sets that are acceptable. Permanent.
 * Examples:
 * <code>Accept-Charset: utf-8</code>
 * @type {String}
 */
const ACCEPT_CHARSET = 'Accept-Charset';

/**
 * List of acceptable encodings. See HTTP compression. Permanent.
 * Examples:
 * <code>Accept-Encoding: gzip, deflate</code>
 * @type {String}
 */
const ACCEPT_ENCODING = 'Accept-Encoding';

/**
 * List of acceptable human languages for response. See Content negotiation. Permanent.
 * Examples:
 * <code>Accept-Language: en-US</code>
 * @type {String}
 */
const ACCEPT_LANGUAGE = 'Accept-Language';

/**
 * Acceptable version in time. Provisional.
 * Examples:
 * <code>Accept-Datetime: Thu, 31 May 2007 20:35:00 GMT</code>
 * @type {String}
 */
const ACCEPT_DATETIME = 'Accept-Datetime';

/**
 * Authentication credentials for HTTP authentication. Permanent.
 * Examples:
 * <code>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code>
 * @type {String}
 */
const AUTHORIZATION = 'Authorization';

/**
 * Used to specify directives that must be obeyed by all caching mechanisms along the request-response chain.
 * Permanent.
 * Examples:
 * <code>Cache-Control: no-cache</code>
 * @type {String}
 */
const CACHE_CONTROL = 'Cache-Control';

/**
 * Control options for the current connection and list of hop-by-hop request fields. Permanent.
 * Examples:
 * <code>Connection: keep-alive</code>
 * <code>Connection: Upgrade</code>
 * @type {String}
 */
const CONNECTION = 'Connection';

/**
 * An HTTP cookie previously sent by the server with Set-Cookie (below). Permanent: standard.
 * Examples:
 * <code>Cookie: $Version=1, Skin=new,</code>
 * @type {String}
 */
const COOKIE = 'Cookie';

/**
 * The length of the request body in octets (8-bit bytes). Permanent.
 * Examples:
 * <code>Content-Length: 348</code>
 * @type {String}
 */
const CONTENT_LENGTH = 'Content-Length';

/**
 * A Base64-encoded binary MD5 sum of the content of the request body. Obsolete.
 * Examples:
 * <code>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</code>
 * @type {String}
 */
const CONTENT_MD5 = 'Content-MD5';

/**
 * The MIME type of the body of the request (used with POST and PUT requests). Permanent.
 * <code>Content-Type: application/x-www-form-urlencoded</code>
 * @type {String}
 */
const CONTENT_TYPE = 'Content-Type';

/**
 * The date and time that the message was sent (in "HTTP-date" format as defined by RFC 7231 Date/Time Formats).
 * Permanent.
 * Examples:
 * <code>Date: Tue, 15 Nov 1994 08:12:31 GMT</code>
 * @type {String}
 */
const DATE = 'Date';

/**
 * Indicates that particular server behaviors are required by the client. Permanent.
 * Examples:
 * <code>Expect: 100-continue</code>
 * @type {String}
 */
const EXPECT = 'Expect';

/**
 * The email address of the user making the request. Permanent.
 * Examples:
 * <code>From: user@example.com</code>
 * @type {String}
 */
const FROM = 'From';

/**
 * The domain name of the server (for virtual hosting), and the TCP port number on which the server is listening. The
 * port number may be omitted if the port is the standard port for the service requested. Permanent. Mandatory since
 * HTTP/1.1.
 * Examples:
 * <code>Host: en.wikipedia.org:80</code>
 * <code>Host: en.wikipedia.org</code>
 * @type {String}
 */
const HOST = 'Host';

/**
 * Only perform the action if the client supplied entity matches the same entity on the server. This is mainly for
 * methods like PUT to only update a resource if it has not been modified since the user last updated it. Permanent.
 * Examples:
 * <code>If-Match: "737060cd8c284d8af7ad3082f209582d"</code>
 * @type {String}
 */
const IF_MATCH = 'If-Match';

/**
 * Allows a 304 Not Modified to be returned if content is unchanged. Permanent.
 * Examples:
 * <code>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT</code>
 * @type {String}
 */
const IF_MODIFIED_SINCE = 'If-Modified-Since';

/**
 * Allows a 304 Not Modified to be returned if content is unchanged, see HTTP ETag. Permanent.
 * Examples:
 * <code>If-None-Match: "737060cd8c284d8af7ad3082f209582d"</code>
 * @type {String}
 */
const IF_NONE_MATCH = 'If-None-Match';

/**
 * If the entity is unchanged, send me the part(s) that I am missing, otherwise, send me the entire new entity.
 * Permanent.
 * Examples:
 * <code>If-Range: "737060cd8c284d8af7ad3082f209582d"</code>
 * @type {String}
 */
const IF_RANGE = 'If-Range';

/**
 * Only send the response if the entity has not been modified since a specific time. Permanent.
 * Examples:
 * <code>If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT</code>
 * @type {String}
 */
const IF_UNMODIFIED_SINCE = 'If-Unmodified-Since';

/**
 * Limit the number of times the message can be forwarded through proxies or gateways. Permanent.
 * Examples:
 * <code>Max-Forwards: 10</code>
 * @type {String}
 */
const MAX_FORWARDS = 'Max-Forwards';

/**
 * Initiates a request for cross-origin resource sharing (asks server for an 'Access-Control-Allow-Origin' response
 * field). Permanent: standard.
 * Examples:
 * <code>Origin: http://www.example-social-network.com</code>
 * @type {String}
 */
const ORIGIN = 'Origin';

/**
 * Implementation-specific fields that may have various effects anywhere along the request-response chain. Permanent.
 * Examples:
 * <code>Pragma: no-cache</code>
 * @type {String}
 */
const PRAGMA = 'Pragma';

/**
 * Authorization credentials for connecting to a proxy. Permanent.
 * Examples:
 * <code>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code>
 * @type {String}
 */
const PROXY_AUTHORIZATION = 'Proxy-Authorization';

/**
 * Request only part of an entity. Bytes are numbered from 0. See Byte serving. Permanent.
 * Examples:
 * <code>Range: bytes=500-999</code>
 * @type {String}
 */
const RANGE = 'Range';

/**
 * This is the address of the previous web page from which a link to the currently requested page was followed. (The
 * word "referrer" has been misspelled in the RFC as well as in most implementations to the point that it has become
 * standard usage and is considered correct terminology). Permanent.
 * Examples:
 * <code>Referer: http://en.wikipedia.org/wiki/Main_Page</code>
 * @type {String}
 */
const REFERER = 'Referer';

/**
 * The transfer encodings the user agent is willing to accept: the same values as for the response header field
 * Transfer-Encoding can be used, plus the "trailers" value (related to the "chunked" transfer method) to notify the
 * server it expects to receive additional fields in the trailer after the last, zero-sized, chunk. Permanent.
 * Examples:
 * <code>TE: trailers, deflate</code>
 * @type {String}
 */
const TE = 'TE';

/**
 * The user agent string of the user agent. Permanent.
 * Examples:
 * <code>User-Agent: Mozilla/5.0 (X11, Linux x86_64, rv:12.0) Gecko/20100101 Firefox/21.0</code>
 * @type {String}
 */
const USER_AGENT = 'User-Agent';

/**
 * Ask the server to upgrade to another protocol. Permanent.
 * Examples:
 * <code>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</code>
 * @type {String}
 */
const UPGRADE = 'Upgrade';

/**
 * Informs the server of proxies through which the request was sent. Permanent.
 * Examples:
 * <code>Via: 1.0 fred, 1.1 example.com (Apache/1.1)</code>
 * @type {String}
 */
const VIA = 'Via';

/**
 * A general warning about possible problems with the entity body. Permanent.
 * Examples:
 * <code>Warning: 199 Miscellaneous warning</code>
 * @type {String}
 */
const WARNING = 'Warning';

/**
 * mainly used to identify Ajax requests. Most JavaScript frameworks send this field with value of XMLHttpRequest.
 * Examples:
 * <code>X-Requested-With: XMLHttpRequest</code>
 * @type {String}
 */
const X_REQUESTED_WITH = 'X-Requested-With';

/**
 * Requests a web application to disable their tracking of a user. This is Mozilla's version of the X-Do-Not-Track
 * header field (since Firefox 4.0 Beta 11). Safari and IE9 also have support for this field. On March 7, 2011, a
 * draft proposal was submitted to IETF. The W3C Tracking Protection Working Group is producing a specification.
 * Examples:
 * <code>DNT: 1 (Do Not Track Enabled)</code>
 * <code>DNT: 0 (Do Not Track Disabled)</code>
 * @type {String}
 */
const DNT = 'DNT';

/**
 * A de facto standard for identifying the originating IP address of a client connecting to a web server through an
 * HTTP proxy or load balancer.
 * Examples:
 * <code>X-Forwarded-For: client1, proxy1, proxy2</code>
 * <code>X-Forwarded-For: 129.78.138.66, 129.78.64.103</code>
 * @type {String}
 */
const X_FORWARDED_FOR = 'X-Forwarded-For';


/**
 * A de facto standard for identifying the original host requested by the client in the Host HTTP request header, since
 * the host name and/or port of the reverse proxy (load balancer) may differ from the origin server handling the
 * request.
 * Examples:
 * <code>X-Forwarded-Host: en.wikipedia.org:80</code>
 * <code>X-Forwarded-Host: en.wikipedia.org</code>
 * @type {String}
 */
const X_FORWARDED_HOST = 'X-Forwarded-Host';

/**
 * A de facto standard for identifying the originating protocol of an HTTP request, since a reverse proxy (load
 * balancer) may communicate with a web server using HTTP even if the request to the reverse proxy is HTTPS. An
 * alternative form of the header (X-ProxyUser-Ip) is used by Google clients talking to Google servers.
 * Examples:
 * <code>X-Forwarded-Proto: https</code>
 * @type {String}
 */
const X_FORWARDED_PROTO = 'X-Forwarded-Proto';

/**
 * Non-standard header field used by Microsoft applications and load-balancers.
 * Examples:
 * <code>Front-End-Https: on</code>
 * @type {String}
 */
const FRONT_END_HTTPS = 'Front-End-Https';

/**
 * Requests a web application override the method specified in the request (typically POST) with the method given in
 * the header field (typically PUT or DELETE). Can be used when a user agent or firewall prevents PUT or DELETE methods
 * from being sent directly (note that this either a bug in the software component, which ought to be fixed, or an
 * intentional configuration, in which case bypassing it may be the wrong thing to do).
 * Examples:
 * <code>X-HTTP-Method-Override: DELETE</code>
 * @type {String}
 */
const X_HTTP_METHOD_OVERRIDE = 'X-Http-Method-Override';

/**
 * Allows easier parsing of the MakeModel/Firmware that is usually found in the User-Agent String of AT&T Devices.
 * Examples:
 * <code>X-Att-Deviceid: GT-P7320/P7320XXLPG</code>
 * @type {String}
 */
const X_ATT_DEVICEID = 'X-ATT-DeviceId';

/**
 * Links to an XML file on the Internet with a full description and details about the device currently connecting. In the example to the right is an XML file for an AT&T Samsung Galaxy S2.    x-wap-profile: http://wap.samsungmobile.com/uaprof/SGH-I777.xml
 */
const X_WAP_PROFILE = 'X-Wap-Profile';

var _request = /*#__PURE__*/Object.freeze({
	ACCEPT: ACCEPT,
	ACCEPT_CHARSET: ACCEPT_CHARSET,
	ACCEPT_ENCODING: ACCEPT_ENCODING,
	ACCEPT_LANGUAGE: ACCEPT_LANGUAGE,
	ACCEPT_DATETIME: ACCEPT_DATETIME,
	AUTHORIZATION: AUTHORIZATION,
	CACHE_CONTROL: CACHE_CONTROL,
	CONNECTION: CONNECTION,
	COOKIE: COOKIE,
	CONTENT_LENGTH: CONTENT_LENGTH,
	CONTENT_MD5: CONTENT_MD5,
	CONTENT_TYPE: CONTENT_TYPE,
	DATE: DATE,
	EXPECT: EXPECT,
	FROM: FROM,
	HOST: HOST,
	IF_MATCH: IF_MATCH,
	IF_MODIFIED_SINCE: IF_MODIFIED_SINCE,
	IF_NONE_MATCH: IF_NONE_MATCH,
	IF_RANGE: IF_RANGE,
	IF_UNMODIFIED_SINCE: IF_UNMODIFIED_SINCE,
	MAX_FORWARDS: MAX_FORWARDS,
	ORIGIN: ORIGIN,
	PRAGMA: PRAGMA,
	PROXY_AUTHORIZATION: PROXY_AUTHORIZATION,
	RANGE: RANGE,
	REFERER: REFERER,
	TE: TE,
	USER_AGENT: USER_AGENT,
	UPGRADE: UPGRADE,
	VIA: VIA,
	WARNING: WARNING,
	X_REQUESTED_WITH: X_REQUESTED_WITH,
	DNT: DNT,
	X_FORWARDED_FOR: X_FORWARDED_FOR,
	X_FORWARDED_HOST: X_FORWARDED_HOST,
	X_FORWARDED_PROTO: X_FORWARDED_PROTO,
	FRONT_END_HTTPS: FRONT_END_HTTPS,
	X_HTTP_METHOD_OVERRIDE: X_HTTP_METHOD_OVERRIDE,
	X_ATT_DEVICEID: X_ATT_DEVICEID,
	X_WAP_PROFILE: X_WAP_PROFILE
});

/* globals */

/**
 * @typedef {Object} CONSTSHEADERSRESPONSE
 */

/**
 * Implemented as a misunderstanding of the HTTP specifications. Common because of mistakes in implementations of early HTTP versions. Has exactly the same functionality as standard Connection field.    Proxy-Connection: keep-alive
 * @type {String}
 */
const PROXY_CONNECTION = 'Proxy-Connection';

/**
 * Server-side deep packet insertion of a unique ID identifying customers of Verizon Wireless, also known as "perma-cookie" or "supercookie"    X-UIDH: ...
 */
const X_UIDH = 'X-UIDH';

/**
 * Used to prevent cross-site request forgery. Alternative header names are: X-CSRFToken and X-XSRF-TOKEN    X-Csrf-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql
 */
const X_CSRF_TOKEN = 'X-Csrf-Token';

/**
 * Specifying which web sites can participate in cross-origin resource sharing    Access-Control-Allow-Origin: *    Provisional
 */
const ACCESS_CONTROL_ALLOW_ORIGIN = 'Access-Control-Allow-Origin';

/**
 * Specifies which patch document formats this server supports    Accept-Patch: text/example,charset=utf-8    Permanent
 */
const ACCEPT_PATCH = 'Accept-Patch';

/**
 * What partial content range types this server supports via byte serving    Accept-Ranges: bytes    Permanent
 */
const ACCEPT_RANGES = 'Accept-Ranges';

/**
 * The age the object has been in a proxy cache in seconds    Age: 12    Permanent
 */
const AGE = 'Age';

/**
 * Valid actions for a specified resource. To be used for a 405 Method not allowed    Allow: GET, HEAD    Permanent
 */
const ALLOW = 'Allow';

/**
 * Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds    Cache-Control: max-age=3600    Permanent
 */
const CACHE_CONTROL$1 = 'Cache-Control';

/**
 * Control options for the current connection and list of hop-by-hop response fields    Connection: close    Permanent
 */
const CONNECTION$1 = 'Connection';

/**
 * An opportunity to raise a "File Download" dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.    Content-Disposition: attachment, filename="fname.ext"    Permanent
 */
const CONTENT_DISPOSITION = 'Content-Disposition';

/**
 * The type of encoding used on the data. See HTTP compression.    Content-Encoding: gzip    Permanent
 */
const CONTENT_ENCODING = 'Content-Encoding';

/**
 * The natural language or languages of the intended audience for the enclosed content    Content-Language: da    Permanent
 */
const CONTENT_LANGUAGE = 'Content-Language';

/**
 * The length of the response body in octets (8-bit bytes)    Content-Length: 348    Permanent
 */
const CONTENT_LENGTH$1 = 'Content-Length';

/**
 * An alternate location for the returned data    Content-Location: /index.htm    Permanent
 */
const CONTENT_LOCATION = 'Content-Location';

/**
 * A Base64-encoded binary MD5 sum of the content of the response    Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==    Obsolete
 */
const CONTENT_MD5$1 = 'Content-MD5';

/**
 * Where in a full body message this partial message belongs    Content-Range: bytes 21010-47021/47022    Permanent
 */
const CONTENT_RANGE = 'Content-Range';

/**
 * The MIME type of this content    Content-Type: text/html, charset=utf-8    Permanent
 */
const CONTENT_TYPE$1 = 'Content-Type';

/**
 * The date and time that the message was sent (in "HTTP-date" format as defined by RFC 7231)    Date: Tue, 15 Nov 1994 08:12:31 GMT    Permanent
 */
const DATE$1 = 'Date';

/**
 * An identifier for a specific version of a resource, often a message digest    ETag: "737060cd8c284d8af7ad3082f209582d"    Permanent
 */
const ETAG = 'ETag';

/**
 * Gives the date/time after which the response is considered stale (in "HTTP-date" format as defined by RFC 7231)    Expires: Thu, 01 Dec 1994 16:00:00 GMT    Permanent: standard
 */
const EXPIRES = 'Expires';

/**
 * The last modified date for the requested object (in "HTTP-date" format as defined by RFC 7231)    Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT    Permanent
 */
const LAST_MODIFIED = 'Last-Modified';

/**
 * Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988    Link: </feed>, rel="alternate"    Permanent
 */
const LINK = 'Link';

/**
 * Used in redirection, or when a new resource has been created.    Location: http://www.w3.org/pub/WWW/People.html    Permanent
 */
const LOCATION = 'Location';

/**
 * This field is supposed to set P3P policy, in the form of P3P:CP="your_compact_policy". However, P3P did not take off, most browsers have never fully implemented it, a lot of websites set this field with fake policy text, that was enough to fool browsers the existence of P3P policy and grant permissions for third party cookies.    P3P: CP="This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&answer=151657 for more info."    Permanent
 * @type {string}
 */
const P3P = 'P3P';

/**
 * Implementation-specific fields that may have various effects anywhere along the request-response chain.    Pragma: no-cache    Permanent
 */
const PRAGMA$1 = 'Pragma';

/**
 * Request authentication to access the proxy.    Proxy-Authenticate: Basic    Permanent
 */
const PROXY_AUTHENTICATION = 'Proxy-Authenticate';

/**
 * HTTP Public Key Pinning, announces hash of website's authentic TLS certificate    Public-Key-Pins: max-age=2592000, pin-sha256="E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=",    Permanent
 */
const PUBLIC_KEY_PINS = 'Public-Key-Pins';

/**
 * Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.    Refresh: 5, url=http://www.w3.org/pub/WWW/People.html    Proprietary and non-standard: a header extension introduced by Netscape and supported by most web browsers.
 */
const REFRESH = 'Refresh';

/**
 * If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.

 Example 1: Retry-After: 120
 Example 2: Retry-After: Fri, 07 Nov 2014 23:59:59 GMT
 Permanent
 *
 */
const RETRY_AFTER = 'Retry-After';

/**
 * A name for the server    Server: Apache/2.4.1 (Unix)    Permanent
 */
const SERVER = 'Server';

/**
 * An HTTP cookie    Set-Cookie: UserID=JohnDoe, Max-Age=3600, Version=1    Permanent: standard
 */
const SET_COOKIE = 'Set-Cookie';

/**
 * CGI header field specifying the status of the HTTP response. Normal HTTP responses use a separate "Status-Line" instead, defined by RFC 7230.    Status: 200 OK    Not listed as a registered field name
 */
const STATUS = 'Status';

/**
 * A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.    Strict-Transport-Security: max-age=16070400, includeSubDomains    Permanent: standard
 */
const STRICT_TRANSPORT_SECURITY = 'Strict-Transport-Security';

/**
 * The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer coding.    Trailer: Max-Forwards    Permanent
 */
const TRAILER = 'Trailer';

/**
 * The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.    Transfer-Encoding: chunked    Permanent
 */
const TRANSFER_ENCODING = 'Transfer-Encoding';

/**
 * Ask the client to upgrade to another protocol.    Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11    Permanent
 */
const UPGRADE$1 = 'Upgrade';

/**
 * Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.    Vary: *    Permanent
 */
const VARY = 'Vary';

/**
 * Informs the client of proxies through which the response was sent.    Via: 1.0 fred, 1.1 example.com (Apache/1.1)    Permanent
 */
const VIA$1 = 'Via';

/**
 * A general warning about possible problems with the entity body.    Warning: 199 Miscellaneous warning    Permanent
 */
const WARNING$1 = 'Warning';

/**
 * Indicates the authentication scheme that should be used to access the requested entity.    WWW-Authenticate: Basic    Permanent
 */
const WWW_AUTHENTICATE = 'WWW-Authenticate';

/**
 * Clickjacking protection: deny - no rendering within a frame, sameorigin - no rendering if origin mismatch, allow-from - allow from specified location, allowall - non-standard, allow from any location    X-Frame-Options: deny    Obsolete
 */
const X_FRAME_OPTIONS = 'X-Frame-Options';

/**
 * Cross-site scripting (XSS) filter    X-XSS-Protection: 1, mode=block
 */
const X_XSS_PROTECTION = 'X-XSS-Protection';

/**
 * X-Content-Security-Policy, X-WebKit-CSP    Content Security Policy definition.    X-WebKit-CSP: default-src 'self'
 */
const CONTENT_SECURITY_POLICY = 'Content-Security-Policy,';

/**
 * The only defined value, "nosniff", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type. This also applies to Google Chrome, when downloading extensions.    X-Content-Type-Options: nosniff
 */
const X_CONTENT_TYPE_OPTIONS = 'X-Content-Type-Options';

/**
 * specifies the technology (e.g. ASP.NET, PHP, JBoss) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)    X-Powered-By: PHP/5.4.0
 */
const X_POWERED_BY = 'X-Powered-By';

/**
 * Recommends the preferred rendering engine (often a backward-compatibility mode) to use to display the content. Also used to activate Chrome Frame in Internet Explorer.    X-UA-Compatible: IE=EmulateIE7

 X-UA-Compatible: IE=edge
 X-UA-Compatible: Chrome=1
 */
const X_UA_COMPATIBLE = 'X-UA-Compatible';

/**
 * Provide the duration of the audio or video in seconds, only supported by Gecko browsers    X-Content-Duration: 42.666
 */
const X_CONTENT_DURATION = 'X-Content-Duration';

var _response = /*#__PURE__*/Object.freeze({
	PROXY_CONNECTION: PROXY_CONNECTION,
	X_UIDH: X_UIDH,
	X_CSRF_TOKEN: X_CSRF_TOKEN,
	ACCESS_CONTROL_ALLOW_ORIGIN: ACCESS_CONTROL_ALLOW_ORIGIN,
	ACCEPT_PATCH: ACCEPT_PATCH,
	ACCEPT_RANGES: ACCEPT_RANGES,
	AGE: AGE,
	ALLOW: ALLOW,
	CACHE_CONTROL: CACHE_CONTROL$1,
	CONNECTION: CONNECTION$1,
	CONTENT_DISPOSITION: CONTENT_DISPOSITION,
	CONTENT_ENCODING: CONTENT_ENCODING,
	CONTENT_LANGUAGE: CONTENT_LANGUAGE,
	CONTENT_LENGTH: CONTENT_LENGTH$1,
	CONTENT_LOCATION: CONTENT_LOCATION,
	CONTENT_MD5: CONTENT_MD5$1,
	CONTENT_RANGE: CONTENT_RANGE,
	CONTENT_TYPE: CONTENT_TYPE$1,
	DATE: DATE$1,
	ETAG: ETAG,
	EXPIRES: EXPIRES,
	LAST_MODIFIED: LAST_MODIFIED,
	LINK: LINK,
	LOCATION: LOCATION,
	P3P: P3P,
	PRAGMA: PRAGMA$1,
	PROXY_AUTHENTICATION: PROXY_AUTHENTICATION,
	PUBLIC_KEY_PINS: PUBLIC_KEY_PINS,
	REFRESH: REFRESH,
	RETRY_AFTER: RETRY_AFTER,
	SERVER: SERVER,
	SET_COOKIE: SET_COOKIE,
	STATUS: STATUS,
	STRICT_TRANSPORT_SECURITY: STRICT_TRANSPORT_SECURITY,
	TRAILER: TRAILER,
	TRANSFER_ENCODING: TRANSFER_ENCODING,
	UPGRADE: UPGRADE$1,
	VARY: VARY,
	VIA: VIA$1,
	WARNING: WARNING$1,
	WWW_AUTHENTICATE: WWW_AUTHENTICATE,
	X_FRAME_OPTIONS: X_FRAME_OPTIONS,
	X_XSS_PROTECTION: X_XSS_PROTECTION,
	CONTENT_SECURITY_POLICY: CONTENT_SECURITY_POLICY,
	X_CONTENT_TYPE_OPTIONS: X_CONTENT_TYPE_OPTIONS,
	X_POWERED_BY: X_POWERED_BY,
	X_UA_COMPATIBLE: X_UA_COMPATIBLE,
	X_CONTENT_DURATION: X_CONTENT_DURATION
});

/* global */

/**
 * @typedef {Object} CONSTSHEADERS
 */

/**
 * @type {CONSTSHEADERSREQUEST}
 */
const request = _request;

/**
 * @type {CONSTSHEADERSRESPONSE}
 */
const response = _response;

var _headers = /*#__PURE__*/Object.freeze({
	request: request,
	response: response
});

/* global */

/**
 * @typedef {Object} CONSTSMETHODS
 */

/**
 * The OPTIONS method represents a request for information about the communication options available on the
 * request/response chain identified by the Request-URI. This method allows the client to determine the options and/or
 * requirements associated with a resource, or the capabilities of a server, without implying a resource action or
 * initiating a resource retrieval.
 *
 * Responses to this method are not cacheable.
 *
 * If the OPTIONS request includes an entity-body (as indicated by the presence of Content-Length or
 * Transfer-Encoding), then the media type MUST be indicated by a Content-Type field. Although this specification does
 * not define any use for such a body, future extensions to HTTP might use the OPTIONS body to make more detailed
 * queries on the server. A server that does not support such an extension MAY discard the request body.
 *
 * If the Request-URI is an asterisk ("*"), the OPTIONS request is intended to apply to the server in general rather
 * than to a specific resource. Since a server's communication options typically depend on the resource, the "*"
 * request is only useful as a "ping" or "no-op" type of method, it does nothing beyond allowing the client to test the
 * capabilities of the server. For example, this can be used to test a proxy for HTTP/1.1 compliance (or lack thereof).
 *
 * If the Request-URI is not an asterisk, the OPTIONS request applies only to the options that are available when
 * communicating with that resource.
 *
 * A 200 response SHOULD include any header fields that indicate optional features implemented by the server and
 * applicable to that resource (e.g., Allow), possibly including extensions not defined by this specification. The
 * response body, if any, SHOULD also include information about the communication options. The format for such a body
 * is not defined by this specification, but might be defined by future extensions to HTTP. Content negotiation MAY be
 * used to select the appropriate response format. If no response body is included, the response MUST include a
 * Content-Length field with a field-value of "0".
 *
 * The Max-Forwards request-header field MAY be used to target a specific proxy in the request chain. When a proxy
 * receives an OPTIONS request on an absoluteURI for which request forwarding is permitted, the proxy MUST check for a
 * Max-Forwards field. If the Max-Forwards field-value is zero ("0"), the proxy MUST NOT forward the message, instead,
 * the proxy SHOULD respond with its own communication options. If the Max-Forwards field-value is an integer greater
 * than zero, the proxy MUST decrement the field-value when it forwards the request. If no Max-Forwards field is
 * present in the request, then the forwarded request MUST NOT include a Max-Forwards field.
 *
 * @type {String}
 */
const OPTIONS = 'OPTIONS';

/**
 * The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI. If
 * the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity in
 * the response and not the source text of the process, unless that text happens to be the output of the process.
 *
 * The semantics of the GET method change to a "conditional GET" if the request message includes an If-Modified-Since;
 * If-Unmodified-Since, If-Match, If-None-Match, or If-Range header field. A conditional GET method requests that the
 * entity be transferred only under the circumstances described by the conditional header field(s). The conditional GET
 * method is intended to reduce unnecessary network usage by allowing cached entities to be refreshed without requiring
 * multiple requests or transferring data already held by the client.
 *
 * The semantics of the GET method change to a "partial GET" if the request message includes a Range header field. A
 * partial GET requests that only part of the entity be transferred, as described in section 14.35. The partial GET
 * method is intended to reduce unnecessary network usage by allowing partially-retrieved entities to be completed
 * without transferring data already held by the client.
 *
 * The response to a GET request is cacheable if and only if it meets the requirements for HTTP caching described in
 * section 13.
 *
 * See section 15.1.3 for security considerations when used for forms.
 *
 * @type {String}
 */
const GET = 'GET';

/**
 * The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response. The
 * metainformation contained in the HTTP headers in response to a HEAD request SHOULD be identical to the information
 * sent in response to a GET request. This method can be used for obtaining metainformation about the entity implied by
 * the request without transferring the entity-body itself. This method is often used for testing hypertext links for
 * validity, accessibility, and recent modification.
 *
 * The response to a HEAD request MAY be cacheable in the sense that the information contained in the response MAY be
 * used to update a previously cached entity from that resource. If the new field values indicate that the cached
 * entity differs from the current entity (as would be indicated by a change in Content-Length, Content-MD5, ETag or
 * Last-Modified), then the cache MUST treat the cache entry as stale.
 *
 * @type {String}
 */
const HEAD = 'HEAD';

/**
 * The POST method is used to request that the origin server accept the entity enclosed in the request as a new
 * subordinate of the resource identified by the Request-URI in the Request-Line. POST is designed to allow a uniform
 * method to cover the following functions:
 * <ul>
 *     <li>Annotation of existing resources,</li>
 *     <li>Posting a message to a bulletin board, newsgroup, mailing list, or similar group of articles,</li>
 *     <li>Providing a block of data, such as the result of submitting a form, to a data-handling process,</li>
 *     <li>Extending a database through an append operation.</li>
 * </ul>
 *
 * The actual function performed by the POST method is determined by the server and is usually dependent on the
 * Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory
 * containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate to a
 * database.
 *
 * The action performed by the POST method might not result in a resource that can be identified by a URI. In this
 * case, either 200 (OK) or 204 (No Content) is the appropriate response status, depending on whether or not the
 * response includes an entity that describes the result.
 *
 * If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity
 * which describes the status of the request and refers to the new resource, and a Location header (see section 14.30).
 *
 * Responses to this method are not cacheable, unless the response includes appropriate Cache-Control or Expires header
 * fields. However, the 303 (See Other) response can be used to direct the user agent to retrieve a cacheable resource.
 *
 * POST requests MUST obey the message transmission requirements set out in section 8.2.
 *
 * See section 15.1.3 for security considerations.
 *
 * @type {String}
 */
const POST = 'POST';

/**
 * The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers
 * to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing
 * on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being
 * defined as a new resource by the requesting user agent, the origin server can create the resource with that URI. If
 * a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response. If an
 * existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate
 * successful completion of the request. If the resource could not be created or modified with the Request-URI, an
 * appropriate error response SHOULD be given that reflects the nature of the problem. The recipient of the entity MUST
 * \NOT ignore any Content-* (e.g. Content-Range) headers that it does not understand or implement and MUST return a
 * 501 (Not Implemented) response in such cases.
 *
 * If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those
 * entries SHOULD be treated as stale. Responses to this method are not cacheable.
 *
 * The fundamental difference between the POST and PUT requests is reflected in the different meaning of the
 * Request-URI. The URI in a POST request identifies the resource that will handle the enclosed entity. That resource
 * might be a data-accepting process, a gateway to some other protocol, or a separate entity that accepts annotations.
 * In contrast, the URI in a PUT request identifies the entity enclosed with the request -- the user agent knows what
 * URI is intended and the server MUST NOT attempt to apply the request to some other resource. If the server desires
 * that the request be applied to a different URI, it MUST send a 301 (Moved Permanently) response, the user agent MAY
 * then make its own decision regarding whether or not to redirect the request.
 *
 * A single resource MAY be identified by many different URIs. For example, an article might have a URI for identifying
 * "the current version" which is separate from the URI identifying each particular version. In this case, a PUT
 * request on a general URI might result in several other URIs being defined by the origin server.
 *
 * HTTP/1.1 does not define how a PUT method affects the state of an origin server.
 *
 * PUT requests MUST obey the message transmission requirements set out in section 8.2.
 *
 * Unless otherwise specified for a particular entity-header, the entity-headers in the PUT request SHOULD be applied
 * to the resource created or modified by the PUT.
 *
 * @type {String}
 */
const PUT = 'PUT';

/**
 * The DELETE method requests that the origin server delete the resource identified by the Request-URI. This method MAY
 * be overridden by human intervention (or other means) on the origin server. The client cannot be guaranteed that the
 * operation has been carried out, even if the status code returned from the origin server indicates that the action
 * has been completed successfully. However, the server SHOULD NOT indicate success unless, at the time the response
 * is given, it intends to delete the resource or move it to an inaccessible location.
 *
 * A successful response SHOULD be 200 (OK) if the response includes an entity describing the status, 202 (Accepted) if
 * the action has not yet been enacted, or 204 (No Content) if the action has been enacted but the response does not
 * include an entity.
 *
 * If the request passes through a cache and the Request-URI identifies one or more currently cached entities, those
 * entries SHOULD be treated as stale. Responses to this method are not cacheable.
 *
 * @type {String}
 */
const DELETE = 'DELETE';

/**
 * The TRACE method is used to invoke a remote, application-layer loop- back of the request message. The final
 * recipient of the request SHOULD reflect the message received back to the client as the entity-body of a 200 (OK)
 * response. The final recipient is either the origin server or the first proxy or gateway to receive a Max-Forwards
 * value of zero (0) in the request (see section 14.31). A TRACE request MUST NOT include an entity.
 *
 * TRACE allows the client to see what is being received at the other end of the request chain and use that data for
 * testing or diagnostic information. The value of the Via header field (section 14.45) is of particular interest,
 * since it acts as a trace of the request chain. Use of the Max-Forwards header field allows the client to limit the
 * length of the request chain, which is useful for testing a chain of proxies forwarding messages in an infinite loop.
 *
 * If the request is valid, the response SHOULD contain the entire request message in the entity-body, with a
 * Content-Type of "message/http". Responses to this method MUST NOT be cached.
 *
 * @type {String}
 */
const TRACE = 'TRACE';

/**
 * This specification reserves the method name CONNECT for use with a proxy that can dynamically switch to being a
 * tunnel (e.g. SSL tunneling [44]).
 *
 * @type {String}
 */
const CONNECT = 'CONNECT';

/**
 * The PATCH method requests that a set of changes described in the
 * request entity be applied to the resource identified by the Request-
 * URI.  The set of changes is represented in a format called a "patch
 * document" identified by a media type.  If the Request-URI does not
 * point to an existing resource, the server MAY create a new resource,
 * depending on the patch document type (whether it can logically modify
 * a null resource) and permissions, etc.
 * 
 * The difference between the PUT and PATCH requests is reflected in the
 * way the server processes the enclosed entity to modify the resource
 * identified by the Request-URI.  In a PUT request, the enclosed entity
 * is considered to be a modified version of the resource stored on the
 * origin server, and the client is requesting that the stored version
 * be replaced.  With PATCH, however, the enclosed entity contains a set
 * of instructions describing how a resource currently residing on the
 * origin server should be modified to produce a new version.  The PATCH
 * method affects the resource identified by the Request-URI, and it
 * also MAY have side effects on other resources; i.e., new resources
 * may be created, or existing ones modified, by the application of a
 * PATCH.
 * 
 * PATCH is neither safe nor idempotent as defined by [RFC2616], Section
 * 9.1.
 * 
 * A PATCH request can be issued in such a way as to be idempotent,
 * which also helps prevent bad outcomes from collisions between two
 * PATCH requests on the same resource in a similar time frame.
 * Collisions from multiple PATCH requests may be more dangerous than
 * PUT collisions because some patch formats need to operate from a
 * known base-point or else they will corrupt the resource.  Clients
 * using this kind of patch application SHOULD use a conditional request
 * such that the request will fail if the resource has been updated
 * since the client last accessed the resource.  For example, the client
 * can use a strong ETag [RFC2616] in an If-Match header on the PATCH
 * request.
 * 
 * There are also cases where patch formats do not need to operate from
 * a known base-point (e.g., appending text lines to log files, or non-
 * colliding rows to database tables), in which case the same care in
 * client requests is not needed.
 * 
 * The server MUST apply the entire set of changes atomically and never
 * provide (e.g., in response to a GET during this operation) a
 * partially modified representation.  If the entire patch document
 * cannot be successfully applied, then the server MUST NOT apply any of
 * the changes.  The determination of what constitutes a successful
 * PATCH can vary depending on the patch document and the type of
 * resource(s) being modified.  For example, the common 'diff' utility
 * can generate a patch document that applies to multiple files in a
 * directory hierarchy.  The atomicity requirement holds for all
 * directly affected files.  See "Error Handling", Section 2.2, for
 * details on status codes and possible error conditions.
 * 
 * If the request passes through a cache and the Request-URI identifies
 * one or more currently cached entities, those entries SHOULD be
 * treated as stale.  A response to this method is only cacheable if it
 * contains explicit freshness information (such as an Expires header or
 * "Cache-Control: max-age" directive) as well as the Content-Location
 * header matching the Request-URI, indicating that the PATCH response
 * body is a resource representation.  A cached PATCH response can only
 * be used to respond to subsequent GET and HEAD requests; it MUST NOT
 * be used to respond to other methods (in particular, PATCH).
 * 
 * Note that entity-headers contained in the request apply only to the
 * contained patch document and MUST NOT be applied to the resource
 * being modified.  Thus, a Content-Language header could be present on
 * the request, but it would only mean (for whatever that's worth) that
 * the patch document had a language.  Servers SHOULD NOT store such
 * headers except as trace information, and SHOULD NOT use such header
 * values the same way they might be used on PUT requests.  Therefore,
 * this document does not specify a way to modify a document's Content-
 * Type or Content-Language value through headers, though a mechanism
 * could well be designed to achieve this goal through a patch document.
 * 
 * There is no guarantee that a resource can be modified with PATCH.
 * Further, it is expected that different patch document formats will be
 * appropriate for different types of resources and that no single
 * format will be appropriate for all types of resources.  Therefore,
 * there is no single default patch document format that implementations
 * are required to support.  Servers MUST ensure that a received patch
 * document is appropriate for the type of resource identified by the
 * Request-URI.
 * 
 * Clients need to choose when to use PATCH rather than PUT.  For
 * example, if the patch document size is larger than the size of the
 * new resource data that would be used in a PUT, then it might make
 * sense to use PUT instead of PATCH.  A comparison to POST is even more
 * difficult, because POST is used in widely varying ways and can
 * encompass PUT and PATCH-like operations if the server chooses.  If
 * the operation does not modify the resource identified by the Request-
 * URI in a predictable way, POST should be considered instead of PATCH
 * or PUT.
 */
const PATCH = 'PATCH';

var _methods = /*#__PURE__*/Object.freeze({
	OPTIONS: OPTIONS,
	GET: GET,
	HEAD: HEAD,
	POST: POST,
	PUT: PUT,
	DELETE: DELETE,
	TRACE: TRACE,
	CONNECT: CONNECT,
	PATCH: PATCH
});

/* globals */

/**
 * @typedef {Object} CONSTSTYPES
 */

/**
 * 3D Crossword Plugin
 */
const x3d = 'application/vnd.hzn-3d-crossword';

/**
 * 3GP
 */
const _3gp = 'video/3gpp';

/**
 * 3GP2
 */
const _3g2 = 'video/3gpp2';

/**
 * 3GPP MSEQ File
 */
const mseq = 'application/vnd.mseq';

/**
 * 3M Post It Notes
 */
const pwn = 'application/vnd.3m.post-it-notes';

/**
 * 3rd Generation Partnership Project - Pic Large
 */
const plb = 'application/vnd.3gpp.pic-bw-large';

/**
 * 3rd Generation Partnership Project - Pic Small
 */
const psb = 'application/vnd.3gpp.pic-bw-small';

/**
 * 3rd Generation Partnership Project - Pic Var
 */
const pvb = 'application/vnd.3gpp.pic-bw-var';

/**
 * 3rd Generation Partnership Project - Transaction Capabilities Application Part
 */
const tcap = 'application/vnd.3gpp2.tcap';

/**
 * 7-Zip
 */
const _7z = 'application/x-7z-compressed';

/**
 * AbiWord
 */
const abw = 'application/x-abiword';

/**
 * Ace Archive
 */
const ace = 'application/x-ace-compressed';

/**
 * Active Content Compression
 */
const acc = 'application/vnd.americandynamics.acc';

/**
 * ACU Cobol
 */
const acu = 'application/vnd.acucobol';

/**
 * ACU Cobol
 */
const atc = 'application/vnd.acucorp';

/**
 * Adaptive differential pulse-code modulation
 */
const adp = 'audio/adpcm';

/**
 * Adobe (Macropedia) Authorware - Binary File
 */
const aab = 'application/x-authorware-bin';

/**
 * Adobe (Macropedia) Authorware - Map
 */
const aam = 'application/x-authorware-map';

/**
 * Adobe (Macropedia) Authorware - Segment File
 */
const aas = 'application/x-authorware-seg';

/**
 * Adobe AIR Application
 */
const air = 'application/vnd.adobe.air-application-installer-package+zip';

/**
 * Adobe Flash
 */
const swf = 'application/x-shockwave-flash';

/**
 * Adobe Flex Project
 */
const fxp = 'application/vnd.adobe.fxp';

/**
 * Adobe Portable Document Format
 */
const pdf = 'application/pdf';

/**
 * Adobe PostScript Printer Description File Format
 */
const ppd = 'application/vnd.cups-ppd';

/**
 * Adobe Shockwave Player
 */
const dir = 'application/x-director';

/**
 * Adobe XML Data Package
 */
const xdp = 'application/vnd.adobe.xdp+xml';

/**
 * Adobe XML Forms Data Format
 */
const xfdf = 'application/vnd.adobe.xfdf';

/**
 * Advanced Audio Coding (AAC)
 */
const aac = 'audio/x-aac';

/**
 * Ahead AIR Application
 */
const ahead = 'application/vnd.ahead.space';

/**
 * AirZip FileSECURE
 */
const azf = 'application/vnd.airzip.filesecure.azf';

/**
 * AirZip FileSECURE
 */
const azs = 'application/vnd.airzip.filesecure.azs';

/**
 * Amazon Kindle eBook format
 */
const azw = 'application/vnd.amazon.ebook';

/**
 * AmigaDE
 */
const ami = 'application/vnd.amiga.ami';

/**
 * Andrew Toolkit
 */
const atool = 'application/andrew-inset';

/**
 * Android Package Archive
 */
const apk = 'application/vnd.android.package-archive';

/**
 * ANSER-WEB Terminal Client - Certificate Issue
 */
const cii = 'application/vnd.anser-web-certificate-issue-initiation';

/**
 * ANSER-WEB Terminal Client - Web Funds Transfer
 */
const fti = 'application/vnd.anser-web-funds-transfer-initiation';

/**
 * Antix Game Player
 */
const atx = 'application/vnd.antix.game-component';

/**
 * Apple Installer Package
 */
const mpkg = 'application/vnd.apple.installer+xml';

/**
 * Applixware
 */
const aw = 'application/applixware';

/**
 * Archipelago Lesson Player
 */
const les = 'application/vnd.hhe.lesson-player';

/**
 * Arista Networks Software Image
 */
const swi = 'application/vnd.aristanetworks.swi';

/**
 * Assembler Source File
 */
const s = 'text/x-asm';

/**
 * Atom Publishing Protocol
 */
const atomcat = 'application/atomcat+xml';

/**
 * Atom Publishing Protocol Service Document
 */
const atomsvc = 'application/atomsvc+xml';

/**
 * Atom Syndication Format
 */
const atom = 'application/atom+xml';

/**
 * Attribute Certificate
 */
const ac = 'application/pkix-attr-cert';

/**
 * Audio Interchange File Format
 */
const aif = 'audio/x-aiff';

/**
 * Audio Video Interleave (AVI)
 */
const avi = 'video/x-msvideo';

/**
 * Audiograph
 */
const aep = 'application/vnd.audiograph';

/**
 * AutoCAD DXF
 */
const dxf = 'image/vnd.dxf';

/**
 * Autodesk Design Web Format (DWF)
 */
const dwf = 'model/vnd.dwf';

/**
 * BAS Partitur Format
 */
const par = 'text/plain-bas';

/**
 * Binary CPIO Archive
 */
const bcpio = 'application/x-bcpio';

/**
 * Binary Data
 */
const bin = 'application/octet-stream';

/**
 * BitTorrent
 */
const torrent = 'application/x-bittorrent';

/**
 * Blackberry COD File
 */
const cod = 'application/vnd.rim.cod';

/**
 * BMI Drawing Data Interchange
 */
const bmi = 'application/vnd.bmi';

/**
 * Bourne Shell Script
 */
const sh = 'application/x-sh';

/**
 * BTIF
 */
const btif = 'image/prs.btif';

/**
 * BusinessObjects
 */
const rep = 'application/vnd.businessobjects';

/**
 * Bzip Archive
 */
const bz = 'application/x-bzip';

/**
 * Bzip2 Archive
 */
const bz2 = 'application/x-bzip2';

/**
 * C Shell Script
 */
const csh = 'application/x-csh';

/**
 * C Source File
 */
const c = 'text/x-c';

/**
 * CambridgeSoft Chem Draw
 */
const cdxml = 'application/vnd.chemdraw+xml';

/**
 * Cascading Style Sheets (CSS)
 */
const css = 'text/css';

/**
 * ChemDraw eXchange file
 */
const cdx = 'chemical/x-cdx';

/**
 * Chemical Markup Language
 */
const cml = 'chemical/x-cml';

/**
 * Chemical Style Markup Language
 */
const csml = 'chemical/x-csml';

/**
 * CIM Database
 */
const cdbcmsg = 'application/vnd.contact.cmsg';

/**
 * Claymore Data Files
 */
const cla = 'application/vnd.claymore';

/**
 * Clonk Game
 */
const c4g = 'application/vnd.clonk.c4group';

/**
 * Close Captioning - Subtitle
 */
const sub = 'image/vnd.dvb.subtitle';

/**
 * Cloud Data Management Interface (CDMI) - Capability
 */
const cdmia = 'application/cdmi-capability';

/**
 * Cloud Data Management Interface (CDMI) - Contaimer
 */
const cdmic = 'application/cdmi-container';

/**
 * Cloud Data Management Interface (CDMI) - Domain
 */
const cdmid = 'application/cdmi-domain';

/**
 * Cloud Data Management Interface (CDMI) - Object
 */
const cdmio = 'application/cdmi-object';

/**
 * Cloud Data Management Interface (CDMI) - Queue
 */
const cdmiq = 'application/cdmi-queue';

/**
 * ClueTrust CartoMobile - Config
 */
const c11amc = 'application/vnd.cluetrust.cartomobile-config';

/**
 * ClueTrust CartoMobile - Config Package
 */
const c11amz = 'application/vnd.cluetrust.cartomobile-config-pkg';

/**
 * CMU Image
 */
const ras = 'image/x-cmu-raster';

/**
 * Comma-Seperated Values
 */
const csv = 'text/csv';

/**
 * Compact Pro
 */
const cpt = 'application/mac-compactpro';

/**
 * Compiled Wireless Markup Language (WMLC)
 */
const wmlc = 'application/vnd.wap.wmlc';

/**
 * Computer Graphics Metafile
 */
const cgm = 'image/cgm';

/**
 * CoolTalk
 */
const ice = 'x-conference/x-cooltalk';

/**
 * Corel Metafile Exchange (CMX)
 */
const cmx = 'image/x-cmx';

/**
 * CorelXARA
 */
const xar = 'application/vnd.xara';

/**
 * CosmoCaller
 */
const cmc = 'application/vnd.cosmocaller';

/**
 * CPIO Archive
 */
const cpio = 'application/x-cpio';

/**
 * CrickSoftware - Clicker
 */
const clkx = 'application/vnd.crick.clicker';

/**
 * CrickSoftware - Clicker - Keyboard
 */
const clkk = 'application/vnd.crick.clicker.keyboard';

/**
 * CrickSoftware - Clicker - Palette
 */
const clkp = 'application/vnd.crick.clicker.palette';

/**
 * CrickSoftware - Clicker - Template
 */
const clkt = 'application/vnd.crick.clicker.template';

/**
 * CrickSoftware - Clicker - Wordbank
 */
const clkw = 'application/vnd.crick.clicker.wordbank';

/**
 * Critical Tools - PERT Chart EXPERT
 */
const wbs = 'application/vnd.criticaltools.wbs+xml';

/**
 * CryptoNote
 */
const cryptonote = 'application/vnd.rig.cryptonote';

/**
 * Crystallographic Interchange Format
 */
const cif = 'chemical/x-cif';

/**
 * CrystalMaker Data Format
 */
const cmdf = 'chemical/x-cmdf';

/**
 * CU-SeeMe
 */
const cu = 'application/cu-seeme';

/**
 * CU-Writer
 */
const cww = 'application/prs.cww';

/**
 * Curl - Detached Applet
 */
const dcurl = 'text/vnd.curl.dcurl';

/**
 * Curl - Manifest File
 */
const mcurl = 'text/vnd.curl.mcurl';

/**
 * Curl - Source Code
 */
const scurl = 'text/vnd.curl.scurl';

/**
 * CURL Applet
 */
const car = 'application/vnd.curl.car';

/**
 * CURL Applet
 */
const pcurl = 'application/vnd.curl.pcurl';

/**
 * CustomMenu
 */
const cmp = 'application/vnd.yellowriver-custom-menu';

/**
 * Data Structure for the Security Suitability of Cryptographic Algorithms
 */
const dssc = 'application/dssc+der';

/**
 * Data Structure for the Security Suitability of Cryptographic Algorithms
 */
const xdssc = 'application/dssc+xml';

/**
 * Debian Package
 */
const deb = 'application/x-debian-package';

/**
 * DECE Audio
 */
const uva = 'audio/vnd.dece.audio';

/**
 * DECE Graphic
 */
const uvi = 'image/vnd.dece.graphic';

/**
 * DECE High Definition Video
 */
const uvh = 'video/vnd.dece.hd';

/**
 * DECE Mobile Video
 */
const uvm = 'video/vnd.dece.mobile';

/**
 * DECE MP4
 */
const uvu = 'video/vnd.uvvu.mp4';

/**
 * DECE PD Video
 */
const uvp = 'video/vnd.dece.pd';

/**
 * DECE SD Video
 */
const uvs = 'video/vnd.dece.sd';

/**
 * DECE Video
 */
const uvv = 'video/vnd.dece.video';

/**
 * Device Independent File Format (DVI)
 */
const dvi = 'application/x-dvi';

/**
 * Digital Siesmograph Networks - SEED Datafiles
 */
const seed = 'application/vnd.fdsn.seed';

/**
 * Digital Talking Book
 */
const dtb = 'application/x-dtbook+xml';

/**
 * Digital Talking Book - Resource File
 */
const res = 'application/x-dtbresource+xml';

/**
 * Digital Video Broadcasting
 */
const ait = 'application/vnd.dvb.ait';

/**
 * Digital Video Broadcasting
 */
const svc = 'application/vnd.dvb.service';

/**
 * Digital Winds Music
 */
const eol = 'audio/vnd.digital-winds';

/**
 * DjVu
 */
const djvu = 'image/vnd.djvu';

/**
 * Document Type Definition
 */
const dtd = 'application/xml-dtd';

/**
 * Dolby Meridian Lossless Packing
 */
const mlp = 'application/vnd.dolby.mlp';

/**
 * Doom Video Game
 */
const wad = 'application/x-doom';

/**
 * DPGraph
 */
const dpg = 'application/vnd.dpgraph';

/**
 * DRA Audio
 */
const dra = 'audio/vnd.dra';

/**
 * DreamFactory
 */
const dfac = 'application/vnd.dreamfactory';

/**
 * DTS Audio
 */
const dts = 'audio/vnd.dts';

/**
 * DTS High Definition Audio
 */
const dtshd = 'audio/vnd.dts.hd';

/**
 * DWG Drawing
 */
const dwg = 'image/vnd.dwg';

/**
 * DynaGeo
 */
const geo = 'application/vnd.dynageo';

/**
 * ECMAScript
 */
const es = 'application/ecmascript';

/**
 * EcoWin Chart
 */
const mag = 'application/vnd.ecowin.chart';

/**
 * EDMICS 2000
 */
const mmr = 'image/vnd.fujixerox.edmics-mmr';

/**
 * EDMICS 2000
 */
const rlc = 'image/vnd.fujixerox.edmics-rlc';

/**
 * Efficient XML Interchange
 */
const exi = 'application/exi';

/**
 * EFI Proteus
 */
const mgz = 'application/vnd.proteus.magazine';

/**
 * Electronic Publication
 */
const epub = 'application/epub+zip';

/**
 * Email Message
 */
const eml = 'message/rfc822';

/**
 * Enliven Viewer
 */
const nml = 'application/vnd.enliven';

/**
 * Express by Infoseek
 */
const xpr = 'application/vnd.is-xpr';

/**
 * eXtended Image File Format (XIFF)
 */
const xif = 'image/vnd.xiff';

/**
 * Extensible Forms Description Language
 */
const xfdl = 'application/vnd.xfdl';

/**
 * Extensible MultiModal Annotation
 */
const emma = 'application/emma+xml';

/**
 * EZPix Secure Photo Album
 */
const ez2 = 'application/vnd.ezpix-album';

/**
 * EZPix Secure Photo Album
 */
const ez3 = 'application/vnd.ezpix-package';

/**
 * FAST Search & Transfer ASA
 */
const fst = 'image/vnd.fst';

/**
 * FAST Search & Transfer ASA
 */
const fvt = 'video/vnd.fvt';

/**
 * FastBid Sheet
 */
const fbs = 'image/vnd.fastbidsheet';

/**
 * FCS Express Layout Link
 */
const fe_launch = 'application/vnd.denovo.fcselayout-link';

/**
 * Flash Video
 */
const f4v = 'video/x-f4v';

/**
 * Flash Video
 */
const flv = 'video/x-flv';

/**
 * FlashPix
 */
const fpx = 'image/vnd.fpx';

/**
 * FlashPix
 */
const npx = 'image/vnd.net-fpx';

/**
 * FLEXSTOR
 */
const flx = 'text/vnd.fmi.flexstor';

/**
 * FLI/FLC Animation Format
 */
const fli = 'video/x-fli';

/**
 * FluxTime Clip
 */
const ftc = 'application/vnd.fluxtime.clip';

/**
 * Forms Data Format
 */
const fdf = 'application/vnd.fdf';

/**
 * Fortran Source File
 */
const f = 'text/x-fortran';

/**
 * FrameMaker Interchange Format
 */
const mif = 'application/vnd.mif';

/**
 * FrameMaker Normal Format
 */
const fm = 'application/vnd.framemaker';

/**
 * FreeHand MX
 */
const fh = 'image/x-freehand';

/**
 * Friendly Software Corporation
 */
const fsc = 'application/vnd.fsc.weblaunch';

/**
 * Frogans Player
 */
const fnc = 'application/vnd.frogans.fnc';

/**
 * Frogans Player
 */
const ltf = 'application/vnd.frogans.ltf';

/**
 * Fujitsu - Xerox 2D CAD Data
 */
const ddd = 'application/vnd.fujixerox.ddd';

/**
 * Fujitsu - Xerox DocuWorks
 */
const xdw = 'application/vnd.fujixerox.docuworks';

/**
 * Fujitsu - Xerox DocuWorks Binder
 */
const xbd = 'application/vnd.fujixerox.docuworks.binder';

/**
 * Fujitsu Oasys
 */
const oas = 'application/vnd.fujitsu.oasys';

/**
 * Fujitsu Oasys
 */
const oa2 = 'application/vnd.fujitsu.oasys2';

/**
 * Fujitsu Oasys
 */
const oa3 = 'application/vnd.fujitsu.oasys3';

/**
 * Fujitsu Oasys
 */
const fg5 = 'application/vnd.fujitsu.oasysgp';

/**
 * Fujitsu Oasys
 */
const bh2 = 'application/vnd.fujitsu.oasysprs';

/**
 * FutureSplash Animator
 */
const spl = 'application/x-futuresplash';

/**
 * FuzzySheet
 */
const fzs = 'application/vnd.fuzzysheet';

/**
 * G3 Fax Image
 */
const g3 = 'image/g3fax';

/**
 * GameMaker ActiveX
 */
const gmx = 'application/vnd.gmx';

/**
 * Gen-Trix Studio
 */
const gtw = 'model/vnd.gtw';

/**
 * Genomatix Tuxedo Framework
 */
const txd = 'application/vnd.genomatix.tuxedo';

/**
 * GeoGebra
 */
const ggb = 'application/vnd.geogebra.file';

/**
 * GeoGebra
 */
const ggt = 'application/vnd.geogebra.tool';

/**
 * Geometric Description Language (GDL)
 */
const gdl = 'model/vnd.gdl';

/**
 * GeoMetry Explorer
 */
const gex = 'application/vnd.geometry-explorer';

/**
 * GEONExT and JSXGraph
 */
const gxt = 'application/vnd.geonext';

/**
 * GeoplanW
 */
const g2w = 'application/vnd.geoplan';

/**
 * GeospacW
 */
const g3w = 'application/vnd.geospace';

/**
 * Ghostscript Font
 */
const gsf = 'application/x-font-ghostscript';

/**
 * Glyph Bitmap Distribution Format
 */
const bdf = 'application/x-font-bdf';

/**
 * GNU Tar Files
 */
const gtar = 'application/x-gtar';

/**
 * GNU Texinfo Document
 */
const texinfo = 'application/x-texinfo';

/**
 * Gnumeric
 */
const gnumeric = 'application/x-gnumeric';

/**
 * Google Earth - KML
 */
const kml = 'application/vnd.google-earth.kml+xml';

/**
 * Google Earth - Zipped KML
 */
const kmz = 'application/vnd.google-earth.kmz';

/**
 * GrafEq
 */
const gqf = 'application/vnd.grafeq';

/**
 * Graphics Interchange Format
 */
const gif = 'image/gif';

/**
 * Graphviz
 */
const gv = 'text/vnd.graphviz';

/**
 * Groove - Account
 */
const gac = 'application/vnd.groove-account';

/**
 * Groove - Help
 */
const ghf = 'application/vnd.groove-help';

/**
 * Groove - Identity Message
 */
const gim = 'application/vnd.groove-identity-message';

/**
 * Groove - Injector
 */
const grv = 'application/vnd.groove-injector';

/**
 * Groove - Tool Message
 */
const gtm = 'application/vnd.groove-tool-message';

/**
 * Groove - Tool Template
 */
const tpl = 'application/vnd.groove-tool-template';

/**
 * Groove - Vcard
 */
const vcg = 'application/vnd.groove-vcard';

/**
 * H.261
 */
const h261 = 'video/h261';

/**
 * H.263
 */
const h263 = 'video/h263';

/**
 * H.264
 */
const h264 = 'video/h264';

/**
 * Hewlett Packard Instant Delivery
 */
const hpid = 'application/vnd.hp-hpid';

/**
 * Hewlett-Packard's WebPrintSmart
 */
const hps = 'application/vnd.hp-hps';

/**
 * Hierarchical Data Format
 */
const hdf = 'application/x-hdf';

/**
 * Hit'n'Mix
 */
const rip = 'audio/vnd.rip';

/**
 * Homebanking Computer Interface (HBCI)
 */
const hbci = 'application/vnd.hbci';

/**
 * HP Indigo Digital Press - Job Layout Languate
 */
const jlt = 'application/vnd.hp-jlyt';

/**
 * HP Printer Command Language
 */
const pcl = 'application/vnd.hp-pcl';

/**
 * HP-GL/2 and HP RTL
 */
const hpgl = 'application/vnd.hp-hpgl';

/**
 * HV Script
 */
const hvs = 'application/vnd.yamaha.hv-script';

/**
 * HV Voice Dictionary
 */
const hvd = 'application/vnd.yamaha.hv-dic';

/**
 * HV Voice Parameter
 */
const hvp = 'application/vnd.yamaha.hv-voice';

/**
 * Hydrostatix Master Suite
 */
const sfd_hdstx = 'application/vnd.hydrostatix.sof-data';

/**
 * Hyperstudio
 */
const stk = 'application/hyperstudio';

/**
 * Hypertext Application Language
 */
const hal = 'application/vnd.hal+xml';

/**
 * HyperText Markup Language (HTML)
 */
const html = 'text/html';

/**
 * IBM DB2 Rights Manager
 */
const irm = 'application/vnd.ibm.rights-management';

/**
 * IBM Electronic Media Management System - Secure Container
 */
const sc = 'application/vnd.ibm.secure-container';

/**
 * iCalendar
 */
const ics = 'text/calendar';

/**
 * ICC profile
 */
const icc = 'application/vnd.iccprofile';

/**
 * Icon Image
 */
const ico = 'image/x-icon';

/**
 * igLoader
 */
const igl = 'application/vnd.igloader';

/**
 * Image Exchange Format
 */
const ief = 'image/ief';

/**
 * ImmerVision PURE Players
 */
const ivp = 'application/vnd.immervision-ivp';

/**
 * ImmerVision PURE Players
 */
const ivu = 'application/vnd.immervision-ivu';

/**
 * IMS Networks
 */
const rif = 'application/reginfo+xml';

/**
 * In3D - 3DML
 */
const spot = 'text/vnd.in3d.spot';

/**
 * Initial Graphics Exchange Specification (IGES)
 */
const igs = 'model/iges';

/**
 * Interactive Geometry Software
 */
const i2g = 'application/vnd.intergeo';

/**
 * Interactive Geometry Software Cinderella
 */
const cdy = 'application/vnd.cinderella';

/**
 * Intercon FormNet
 */
const xpw = 'application/vnd.intercon.formnet';

/**
 * International Society for Advancement of Cytometry
 */
const fcs = 'application/vnd.isac.fcs';

/**
 * Internet Protocol Flow Information Export
 */
const ipfix = 'application/ipfix';

/**
 * Internet Public Key Infrastructure - Certificate
 */
const cer = 'application/pkix-cert';

/**
 * Internet Public Key Infrastructure - Certificate Management Protocole
 */
const pki = 'application/pkixcmp';

/**
 * Internet Public Key Infrastructure - Certificate Revocation Lists
 */
const crl = 'application/pkix-crl';

/**
 * Internet Public Key Infrastructure - Certification Path
 */
const pkipath = 'application/pkix-pkipath';

/**
 * IOCOM Visimeet
 */
const igm = 'application/vnd.insors.igm';

/**
 * IP Unplugged Roaming Client
 */
const rcprofile = 'application/vnd.ipunplugged.rcprofile';

/**
 * iRepository / Lucidoc Editor
 */
const irp = 'application/vnd.irepository.package+xml';

/**
 * J2ME App Descriptor
 */
const jad = 'text/vnd.sun.j2me.app-descriptor';

/**
 * Java Archive
 */
const jar = 'application/java-archive';

/**
 * Java Bytecode File
 */
const _class = 'application/java-vm';

/**
 * Java Network Launching Protocol
 */
const jnlp = 'application/x-java-jnlp-file';

/**
 * Java Serialized Object
 */
const ser = 'application/java-serialized-object';

/**
 * Java Source File
 */
const java = 'text/x-java-source,java';

/**
 * JavaScript
 */
const js = 'application/javascript';

/**
 * JavaScript Object Notation (JSON)
 */
const json = 'application/json';

/**
 * Joda Archive
 */
const joda = 'application/vnd.joost.joda-archive';

/**
 * JPEG 2000 Compound Image File Format
 */
const jpm = 'video/jpm';

/**
 * JPEG Image
 */
const jpeg = 'image/jpeg';

/**
 * JPGVideo
 */
const jpgv = 'video/jpeg';

/**
 * Kahootz
 */
const ktz = 'application/vnd.kahootz';

/**
 * Karaoke on Chipnuts Chipsets
 */
const mmd = 'application/vnd.chipnuts.karaoke-mmd';

/**
 * KDE KOffice Office Suite - Karbon
 */
const karbon = 'application/vnd.kde.karbon';

/**
 * KDE KOffice Office Suite - KChart
 */
const chrt = 'application/vnd.kde.kchart';

/**
 * KDE KOffice Office Suite - Kformula
 */
const kfo = 'application/vnd.kde.kformula';

/**
 * KDE KOffice Office Suite - Kivio
 */
const flw = 'application/vnd.kde.kivio';

/**
 * KDE KOffice Office Suite - Kontour
 */
const kon = 'application/vnd.kde.kontour';

/**
 * KDE KOffice Office Suite - Kpresenter
 */
const kpr = 'application/vnd.kde.kpresenter';

/**
 * KDE KOffice Office Suite - Kspread
 */
const ksp = 'application/vnd.kde.kspread';

/**
 * KDE KOffice Office Suite - Kword
 */
const kwd = 'application/vnd.kde.kword';

/**
 * Kenamea App
 */
const htke = 'application/vnd.kenameaapp';

/**
 * Kidspiration
 */
const kia = 'application/vnd.kidspiration';

/**
 * Kinar Applications
 */
const kne = 'application/vnd.kinar';

/**
 * Kodak Storyshare
 */
const sse = 'application/vnd.kodak-descriptor';

/**
 * Laser App Enterprise
 */
const lasxml = 'application/vnd.las.las+xml';

/**
 * LaTeX
 */
const latex = 'application/x-latex';

/**
 * Life Balance - Desktop Edition
 */
const lbd = 'application/vnd.llamagraphics.life-balance.desktop';

/**
 * Life Balance - Exchange Format
 */
const lbe = 'application/vnd.llamagraphics.life-balance.exchange+xml';

/**
 * Lightspeed Audio Lab
 */
const jam = 'application/vnd.jam';

/**
 * Lotus 1-2-3
 */
const _123 = 'application/vnd.lotus-1-2-3';

/**
 * Lotus Approach
 */
const apr = 'application/vnd.lotus-approach';

/**
 * Lotus Freelance
 */
const pre = 'application/vnd.lotus-freelance';

/**
 * Lotus Notes
 */
const nsf = 'application/vnd.lotus-notes';

/**
 * Lotus Organizer
 */
const org = 'application/vnd.lotus-organizer';

/**
 * Lotus Screencam
 */
const scm = 'application/vnd.lotus-screencam';

/**
 * Lotus Wordpro
 */
const lwp = 'application/vnd.lotus-wordpro';

/**
 * Lucent Voice
 */
const lvp = 'audio/vnd.lucent.voice';

/**
 * M3U (Multimedia Playlist)
 */
const m3u = 'audio/x-mpegurl';

/**
 * M4v
 */
const m4v = 'video/x-m4v';

/**
 * Macintosh BinHex 4.0
 */
const hqx = 'application/mac-binhex40';

/**
 * MacPorts Port System
 */
const portpkg = 'application/vnd.macports.portpkg';

/**
 * MapGuide DBXML
 */
const mgp = 'application/vnd.osgeo.mapguide.package';

/**
 * MARC Formats
 */
const mrc = 'application/marc';

/**
 * MARC21 XML Schema
 */
const mrcx = 'application/marcxml+xml';

/**
 * Material Exchange Format
 */
const mxf = 'application/mxf';

/**
 * Mathematica Notebook Player
 */
const nbp = 'application/vnd.wolfram.player';

/**
 * Mathematica Notebooks
 */
const ma = 'application/mathematica';

/**
 * Mathematical Markup Language
 */
const mathml = 'application/mathml+xml';

/**
 * Mbox database files
 */
const mbox = 'application/mbox';

/**
 * MedCalc
 */
const mc1 = 'application/vnd.medcalcdata';

/**
 * Media Server Control Markup Language
 */
const mscml = 'application/mediaservercontrol+xml';

/**
 * MediaRemote
 */
const cdkey = 'application/vnd.mediastation.cdkey';

/**
 * Medical Waveform Encoding Format
 */
const mwf = 'application/vnd.mfer';

/**
 * Melody Format for Mobile Platform
 */
const mfm = 'application/vnd.mfmp';

/**
 * Mesh Data Type
 */
const msh = 'model/mesh';

/**
 * Metadata Authority Description Schema
 */
const mads = 'application/mads+xml';

/**
 * Metadata Encoding and Transmission Standard
 */
const mets = 'application/mets+xml';

/**
 * Metadata Object Description Schema
 */
const mods = 'application/mods+xml';

/**
 * Metalink
 */
const meta4 = 'application/metalink4+xml';

/**
 * Micosoft PowerPoint - Macro-Enabled Template File
 */
const potm = 'application/vnd.ms-powerpoint.template.macroenabled.12';

/**
 * Micosoft Word - Macro-Enabled Document
 */
const docm = 'application/vnd.ms-word.document.macroenabled.12';

/**
 * Micosoft Word - Macro-Enabled Template
 */
const dotm = 'application/vnd.ms-word.template.macroenabled.12';

/**
 * Micro CADAM Helix D&D
 */
const mcd = 'application/vnd.mcd';

/**
 * Micrografx
 */
const flo = 'application/vnd.micrografx.flo';

/**
 * Micrografx iGrafx Professional
 */
const igx = 'application/vnd.micrografx.igx';

/**
 * MICROSEC e-Szign
 */
const es3 = 'application/vnd.eszigno3+xml';

/**
 * Microsoft Access
 */
const mdb = 'application/x-msaccess';

/**
 * Microsoft Advanced Systems Format (ASF)
 */
const asf = 'video/x-ms-asf';

/**
 * Microsoft Application
 */
const exe = 'application/x-msdownload';

/**
 * Microsoft Artgalry
 */
const cil = 'application/vnd.ms-artgalry';

/**
 * Microsoft Cabinet File
 */
const cab = 'application/vnd.ms-cab-compressed';

/**
 * Microsoft Class Server
 */
const ims = 'application/vnd.ms-ims';

/**
 * Microsoft ClickOnce
 */
const application = 'application/x-ms-application';

/**
 * Microsoft Clipboard Clip
 */
const clp = 'application/x-msclip';

/**
 * Microsoft Document Imaging Format
 */
const mdi = 'image/vnd.ms-modi';

/**
 * Microsoft Embedded OpenType
 */
const eot = 'application/vnd.ms-fontobject';

/**
 * Microsoft Excel
 */
const xls = 'application/vnd.ms-excel';

/**
 * Microsoft Excel - Add-In File
 */
const xlam = 'application/vnd.ms-excel.addin.macroenabled.12';

/**
 * Microsoft Excel - Binary Workbook
 */
const xlsb = 'application/vnd.ms-excel.sheet.binary.macroenabled.12';

/**
 * Microsoft Excel - Macro-Enabled Template File
 */
const xltm = 'application/vnd.ms-excel.template.macroenabled.12';

/**
 * Microsoft Excel - Macro-Enabled Workbook
 */
const xlsm = 'application/vnd.ms-excel.sheet.macroenabled.12';

/**
 * Microsoft Html Help File
 */
const chm = 'application/vnd.ms-htmlhelp';

/**
 * Microsoft Information Card
 */
const crd = 'application/x-mscardfile';

/**
 * Microsoft Learning Resource Module
 */
const lrm = 'application/vnd.ms-lrm';

/**
 * Microsoft MediaView
 */
const mvb = 'application/x-msmediaview';

/**
 * Microsoft Money
 */
const mny = 'application/x-msmoney';

/**
 * Microsoft Office - OOXML - Presentation
 */
const pptx = 'application/vnd.openxmlformats-officedocument.presentationml.presentation';

/**
 * Microsoft Office - OOXML - Presentation (Slide)
 */
const sldx = 'application/vnd.openxmlformats-officedocument.presentationml.slide';

/**
 * Microsoft Office - OOXML - Presentation (Slideshow)
 */
const ppsx = 'application/vnd.openxmlformats-officedocument.presentationml.slideshow';

/**
 * Microsoft Office - OOXML - Presentation Template
 */
const potx = 'application/vnd.openxmlformats-officedocument.presentationml.template';

/**
 * Microsoft Office - OOXML - Spreadsheet
 */
const xlsx = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

/**
 * Microsoft Office - OOXML - Spreadsheet Teplate
 */
const xltx = 'application/vnd.openxmlformats-officedocument.spreadsheetml.template';

/**
 * Microsoft Office - OOXML - Word Document
 */
const docx = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';

/**
 * Microsoft Office - OOXML - Word Document Template
 */
const dotx = 'application/vnd.openxmlformats-officedocument.wordprocessingml.template';

/**
 * Microsoft Office Binder
 */
const obd = 'application/x-msbinder';

/**
 * Microsoft Office System Release Theme
 */
const thmx = 'application/vnd.ms-officetheme';

/**
 * Microsoft OneNote
 */
const onetoc = 'application/onenote';

/**
 * Microsoft PlayReady Ecosystem
 */
const pya = 'audio/vnd.ms-playready.media.pya';

/**
 * Microsoft PlayReady Ecosystem Video
 */
const pyv = 'video/vnd.ms-playready.media.pyv';

/**
 * Microsoft PowerPoint
 */
const ppt = 'application/vnd.ms-powerpoint';

/**
 * Microsoft PowerPoint - Add-in file
 */
const ppam = 'application/vnd.ms-powerpoint.addin.macroenabled.12';

/**
 * Microsoft PowerPoint - Macro-Enabled Open XML Slide
 */
const sldm = 'application/vnd.ms-powerpoint.slide.macroenabled.12';

/**
 * Microsoft PowerPoint - Macro-Enabled Presentation File
 */
const pptm = 'application/vnd.ms-powerpoint.presentation.macroenabled.12';

/**
 * Microsoft PowerPoint - Macro-Enabled Slide Show File
 */
const ppsm = 'application/vnd.ms-powerpoint.slideshow.macroenabled.12';

/**
 * Microsoft Project
 */
const mpp = 'application/vnd.ms-project';

/**
 * Microsoft Publisher
 */
const pub = 'application/x-mspublisher';

/**
 * Microsoft Schedule+
 */
const scd = 'application/x-msschedule';

/**
 * Microsoft Silverlight
 */
const xap = 'application/x-silverlight-app';

/**
 * Microsoft Trust UI Provider - Certificate Trust Link
 */
const stl = 'application/vnd.ms-pki.stl';

/**
 * Microsoft Trust UI Provider - Security Catalog
 */
const cat = 'application/vnd.ms-pki.seccat';

/**
 * Microsoft Visio
 */
const vsd = 'application/vnd.visio';

/**
 * Microsoft Windows Media
 */
const wm = 'video/x-ms-wm';

/**
 * Microsoft Windows Media Audio
 */
const wma = 'audio/x-ms-wma';

/**
 * Microsoft Windows Media Audio Redirector
 */
const wax = 'audio/x-ms-wax';

/**
 * Microsoft Windows Media Audio/Video Playlist
 */
const wmx = 'video/x-ms-wmx';

/**
 * Microsoft Windows Media Player Download Package
 */
const wmd = 'application/x-ms-wmd';

/**
 * Microsoft Windows Media Player Playlist
 */
const wpl = 'application/vnd.ms-wpl';

/**
 * Microsoft Windows Media Player Skin Package
 */
const wmz = 'application/x-ms-wmz';

/**
 * Microsoft Windows Media Video
 */
const wmv = 'video/x-ms-wmv';

/**
 * Microsoft Windows Media Video Playlist
 */
const wvx = 'video/x-ms-wvx';

/**
 * Microsoft Windows Metafile
 */
const wmf = 'application/x-msmetafile';

/**
 * Microsoft Windows Terminal Services
 */
const trm = 'application/x-msterminal';

/**
 * Microsoft Word
 */
const doc = 'application/msword';

/**
 * Microsoft Wordpad
 */
const wri = 'application/x-mswrite';

/**
 * Microsoft Works
 */
const wps = 'application/vnd.ms-works';

/**
 * Microsoft XAML Browser Application
 */
const xbap = 'application/x-ms-xbap';

/**
 * Microsoft XML Paper Specification
 */
const xps = 'application/vnd.ms-xpsdocument';

/**
 * MIDI - Musical Instrument Digital Interface
 */
const mid = 'audio/midi';

/**
 * MiniPay
 */
const mpy = 'application/vnd.ibm.minipay';

/**
 * MO:DCA-P
 */
const afp = 'application/vnd.ibm.modcap';

/**
 * Mobile Information Device Profile
 */
const rms = 'application/vnd.jcp.javame.midlet-rms';

/**
 * MobileTV
 */
const tmo = 'application/vnd.tmobile-livetv';

/**
 * Mobipocket
 */
const prc = 'application/x-mobipocket-ebook';

/**
 * Mobius Management Systems - Basket file
 */
const mbk = 'application/vnd.mobius.mbk';

/**
 * Mobius Management Systems - Distribution Database
 */
const dis = 'application/vnd.mobius.dis';

/**
 * Mobius Management Systems - Policy Definition Language File
 */
const plc = 'application/vnd.mobius.plc';

/**
 * Mobius Management Systems - Query File
 */
const mqy = 'application/vnd.mobius.mqy';

/**
 * Mobius Management Systems - Script Language
 */
const msl = 'application/vnd.mobius.msl';

/**
 * Mobius Management Systems - Topic Index File
 */
const txf = 'application/vnd.mobius.txf';

/**
 * Mobius Management Systems - UniversalArchive
 */
const daf = 'application/vnd.mobius.daf';

/**
 * mod_fly / fly.cgi
 */
const fly = 'text/vnd.fly';

/**
 * Mophun Certificate
 */
const mpc = 'application/vnd.mophun.certificate';

/**
 * Mophun VM
 */
const mpn = 'application/vnd.mophun.application';

/**
 * Motion JPEG 2000
 */
const mj2 = 'video/mj2';

/**
 * MPEG Audio
 */
const mpga = 'audio/mpeg';

/**
 * MPEG Url
 */
const mxu = 'video/vnd.mpegurl';

/**
 * MPEG Video
 */
const mpeg = 'video/mpeg';

/**
 * MPEG-21
 */
const m21 = 'application/mp21';

/**
 * MPEG-4 Audio
 */
const mp4a = 'audio/mp4';

/**
 * MPEG-4 Video
 */
const _mp4 = 'video/mp4';

/**
 * MPEG4
 */
const mp4 = 'application/mp4';

/**
 * Multimedia Playlist Unicode
 */
const m3u8 = 'application/vnd.apple.mpegurl';

/**
 * MUsical Score Interpreted Code Invented for the ASCII designation of Notation
 */
const mus = 'application/vnd.musician';

/**
 * Muvee Automatic Video Editing
 */
const msty = 'application/vnd.muvee.style';

/**
 * MXML
 */
const mxml = 'application/xv+xml';

/**
 * N-Gage Game Data
 */
const ngdat = 'application/vnd.nokia.n-gage.data';

/**
 * N-Gage Game Installer
 */
const n_gage = 'application/vnd.nokia.n-gage.symbian.install';

/**
 * Navigation Control file for XML (for ePub)
 */
const ncx = 'application/x-dtbncx+xml';

/**
 * Network Common Data Form (NetCDF)
 */
const nc = 'application/x-netcdf';

/**
 * neuroLanguage
 */
const nlu = 'application/vnd.neurolanguage.nlu';

/**
 * New Moon Liftoff/DNA
 */
const dna = 'application/vnd.dna';

/**
 * NobleNet Directory
 */
const nnd = 'application/vnd.noblenet-directory';

/**
 * NobleNet Sealer
 */
const nns = 'application/vnd.noblenet-sealer';

/**
 * NobleNet Web
 */
const nnw = 'application/vnd.noblenet-web';

/**
 * Nokia Radio Application - Preset
 */
const rpst = 'application/vnd.nokia.radio-preset';

/**
 * Nokia Radio Application - Preset
 */
const rpss = 'application/vnd.nokia.radio-presets';

/**
 * Notation3
 */
const n3 = 'text/n3';

/**
 * Novadigm's RADIA and EDM products
 */
const edm = 'application/vnd.novadigm.edm';

/**
 * Novadigm's RADIA and EDM products
 */
const edx = 'application/vnd.novadigm.edx';

/**
 * Novadigm's RADIA and EDM products
 */
const ext = 'application/vnd.novadigm.ext';

/**
 * NpGraphIt
 */
const gph = 'application/vnd.flographit';

/**
 * Nuera ECELP 4800
 */
const ecelp4800 = 'audio/vnd.nuera.ecelp4800';

/**
 * Nuera ECELP 7470
 */
const ecelp7470 = 'audio/vnd.nuera.ecelp7470';

/**
 * Nuera ECELP 9600
 */
const ecelp9600 = 'audio/vnd.nuera.ecelp9600';

/**
 * Office Document Architecture
 */
const oda = 'application/oda';

/**
 * Ogg
 */
const ogx = 'application/ogg';

/**
 * Ogg Audio
 */
const oga = 'audio/ogg';

/**
 * Ogg Video
 */
const ogv = 'video/ogg';

/**
 * OMA Download Agents
 */
const dd2 = 'application/vnd.oma.dd2+xml';

/**
 * Open Document Text Web
 */
const oth = 'application/vnd.oasis.opendocument.text-web';

/**
 * Open eBook Publication Structure
 */
const opf = 'application/oebps-package+xml';

/**
 * Open Financial Exchange
 */
const qbo = 'application/vnd.intu.qbo';

/**
 * Open Office Extension
 */
const oxt = 'application/vnd.openofficeorg.extension';

/**
 * Open Score Format
 */
const osf = 'application/vnd.yamaha.openscoreformat';

/**
 * Open Web Media Project - Audio
 */
const weba = 'audio/webm';

/**
 * Open Web Media Project - Video
 */
const webm = 'video/webm';

/**
 * OpenDocument Chart
 */
const odc = 'application/vnd.oasis.opendocument.chart';

/**
 * OpenDocument Chart Template
 */
const otc = 'application/vnd.oasis.opendocument.chart-template';

/**
 * OpenDocument Database
 */
const odb = 'application/vnd.oasis.opendocument.database';

/**
 * OpenDocument Formula
 */
const odf = 'application/vnd.oasis.opendocument.formula';

/**
 * OpenDocument Formula Template
 */
const odft = 'application/vnd.oasis.opendocument.formula-template';

/**
 * OpenDocument Graphics
 */
const odg = 'application/vnd.oasis.opendocument.graphics';

/**
 * OpenDocument Graphics Template
 */
const otg = 'application/vnd.oasis.opendocument.graphics-template';

/**
 * OpenDocument Image
 */
const odi = 'application/vnd.oasis.opendocument.image';

/**
 * OpenDocument Image Template
 */
const oti = 'application/vnd.oasis.opendocument.image-template';

/**
 * OpenDocument Presentation
 */
const odp = 'application/vnd.oasis.opendocument.presentation';

/**
 * OpenDocument Presentation Template
 */
const otp = 'application/vnd.oasis.opendocument.presentation-template';

/**
 * OpenDocument Spreadsheet
 */
const ods = 'application/vnd.oasis.opendocument.spreadsheet';

/**
 * OpenDocument Spreadsheet Template
 */
const ots = 'application/vnd.oasis.opendocument.spreadsheet-template';

/**
 * OpenDocument Text
 */
const odt = 'application/vnd.oasis.opendocument.text';

/**
 * OpenDocument Text Master
 */
const odm = 'application/vnd.oasis.opendocument.text-master';

/**
 * OpenDocument Text Template
 */
const ott = 'application/vnd.oasis.opendocument.text-template';

/**
 * OpenGL Textures (KTX)
 */
const ktx = 'image/ktx';

/**
 * OpenOffice - Calc (Spreadsheet)
 */
const sxc = 'application/vnd.sun.xml.calc';

/**
 * OpenOffice - Calc Template (Spreadsheet)
 */
const stc = 'application/vnd.sun.xml.calc.template';

/**
 * OpenOffice - Draw (Graphics)
 */
const sxd = 'application/vnd.sun.xml.draw';

/**
 * OpenOffice - Draw Template (Graphics)
 */
const std = 'application/vnd.sun.xml.draw.template';

/**
 * OpenOffice - Impress (Presentation)
 */
const sxi = 'application/vnd.sun.xml.impress';

/**
 * OpenOffice - Impress Template (Presentation)
 */
const sti = 'application/vnd.sun.xml.impress.template';

/**
 * OpenOffice - Math (Formula)
 */
const sxm = 'application/vnd.sun.xml.math';

/**
 * OpenOffice - Writer (Text - HTML)
 */
const sxw = 'application/vnd.sun.xml.writer';

/**
 * OpenOffice - Writer (Text - HTML)
 */
const sxg = 'application/vnd.sun.xml.writer.global';

/**
 * OpenOffice - Writer Template (Text - HTML)
 */
const stw = 'application/vnd.sun.xml.writer.template';

/**
 * OpenType Font File
 */
const otf = 'application/x-font-otf';

/**
 * OSFPVG
 */
const osfpvg = 'application/vnd.yamaha.openscoreformat.osfpvg+xml';

/**
 * OSGi Deployment Package
 */
const dp = 'application/vnd.osgi.dp';

/**
 * PalmOS Data
 */
const pdb = 'application/vnd.palm';

/**
 * Pascal Source File
 */
const p = 'text/x-pascal';

/**
 * PawaaFILE
 */
const paw = 'application/vnd.pawaafile';

/**
 * PCL 6 Enhanced (Formely PCL XL)
 */
const pclxl = 'application/vnd.hp-pclxl';

/**
 * Pcsel eFIF File
 */
const efif = 'application/vnd.picsel';

/**
 * PCX Image
 */
const pcx = 'image/x-pcx';

/**
 * Photoshop Document
 */
const psd = 'image/vnd.adobe.photoshop';

/**
 * PICSRules
 */
const prf = 'application/pics-rules';

/**
 * PICT Image
 */
const pic = 'image/x-pict';

/**
 * pIRCh
 */
const chat = 'application/x-chat';

/**
 * PKCS #10 - Certification Request Standard
 */
const p10 = 'application/pkcs10';

/**
 * PKCS #12 - Personal Information Exchange Syntax Standard
 */
const p12 = 'application/x-pkcs12';

/**
 * PKCS #7 - Cryptographic Message Syntax Standard
 */
const p7m = 'application/pkcs7-mime';

/**
 * PKCS #7 - Cryptographic Message Syntax Standard
 */
const p7s = 'application/pkcs7-signature';

/**
 * PKCS #7 - Cryptographic Message Syntax Standard (Certificate Request Response)
 */
const p7r = 'application/x-pkcs7-certreqresp';

/**
 * PKCS #7 - Cryptographic Message Syntax Standard (Certificates)
 */
const p7b = 'application/x-pkcs7-certificates';

/**
 * PKCS #8 - Private-Key Information Syntax Standard
 */
const p8 = 'application/pkcs8';

/**
 * PocketLearn Viewers
 */
const plf = 'application/vnd.pocketlearn';

/**
 * Portable Anymap Image
 */
const pnm = 'image/x-portable-anymap';

/**
 * Portable Bitmap Format
 */
const pbm = 'image/x-portable-bitmap';

/**
 * Portable Compiled Format
 */
const pcf = 'application/x-font-pcf';

/**
 * Portable Font Resource
 */
const pfr = 'application/font-tdpfr';

/**
 * Portable Game Notation (Chess Games)
 */
const pgn = 'application/x-chess-pgn';

/**
 * Portable Graymap Format
 */
const pgm = 'image/x-portable-graymap';

/**
 * Portable Network Graphics (PNG)
 */
const png = 'image/png';

/**
 * Portable Pixmap Format
 */
const ppm = 'image/x-portable-pixmap';

/**
 * Portable Symmetric Key Container
 */
const pskcxml = 'application/pskc+xml';

/**
 * PosML
 */
const pml = 'application/vnd.ctc-posml';

/**
 * PostScript
 */
const ai = 'application/postscript';

/**
 * PostScript Fonts
 */
const pfa = 'application/x-font-type1';

/**
 * PowerBuilder
 */
const pbd = 'application/vnd.powerbuilder6';

/**
 * Pretty Good Privacy
 */
const _pgp = 'application/pgp-encrypted';

/**
 * Pretty Good Privacy - Signature
 */
const pgp = 'application/pgp-signature';

/**
 * Preview Systems ZipLock/VBox
 */
const box = 'application/vnd.previewsystems.box';

/**
 * Princeton Video Image
 */
const ptid = 'application/vnd.pvi.ptid1';

/**
 * Pronunciation Lexicon Specification
 */
const pls = 'application/pls+xml';

/**
 * Proprietary P&G Standard Reporting System
 */
const str = 'application/vnd.pg.format';

/**
 * Proprietary P&G Standard Reporting System
 */
const ei6 = 'application/vnd.pg.osasli';

/**
 * PRS Lines Tag
 */
const dsc = 'text/prs.lines.tag';

/**
 * PSF Fonts
 */
const psf = 'application/x-font-linux-psf';

/**
 * PubliShare Objects
 */
const qps = 'application/vnd.publishare-delta-tree';

/**
 * Qualcomm's Plaza Mobile Internet
 */
const wg = 'application/vnd.pmi.widget';

/**
 * QuarkXpress
 */
const qxd = 'application/vnd.quark.quarkxpress';

/**
 * QUASS Stream Player
 */
const esf = 'application/vnd.epson.esf';

/**
 * QUASS Stream Player
 */
const msf = 'application/vnd.epson.msf';

/**
 * QUASS Stream Player
 */
const ssf = 'application/vnd.epson.ssf';

/**
 * QuickAnime Player
 */
const qam = 'application/vnd.epson.quickanime';

/**
 * Quicken
 */
const qfx = 'application/vnd.intu.qfx';

/**
 * Quicktime Video
 */
const qt = 'video/quicktime';

/**
 * RAR Archive
 */
const rar = 'application/x-rar-compressed';

/**
 * Real Audio Sound
 */
const ram = 'audio/x-pn-realaudio';

/**
 * Real Audio Sound
 */
const rmp = 'audio/x-pn-realaudio-plugin';

/**
 * Really Simple Discovery
 */
const rsd = 'application/rsd+xml';

/**
 * RealMedia
 */
const rm = 'application/vnd.rn-realmedia';

/**
 * Recordare Applications
 */
const mxl = 'application/vnd.recordare.musicxml';

/**
 * Recordare Applications
 */
const musicxml = 'application/vnd.recordare.musicxml+xml';

/**
 * Relax NG Compact Syntax
 */
const rnc = 'application/relax-ng-compact-syntax';

/**
 * RemoteDocs R-Viewer
 */
const rdz = 'application/vnd.data-vision.rdz';

/**
 * Resource Description Framework
 */
const rdf = 'application/rdf+xml';

/**
 * RetroPlatform Player
 */
const rp9 = 'application/vnd.cloanto.rp9';

/**
 * RhymBox
 */
const jisp = 'application/vnd.jisp';

/**
 * Rich Text Format
 */
const rtf = 'application/rtf';

/**
 * Rich Text Format (RTF)
 */
const rtx = 'text/richtext';

/**
 * ROUTE 66 Location Based Services
 */
const link66 = 'application/vnd.route66.link66+xml';

/**
 * RSS - Really Simple Syndication
 */
const rss = 'application/rss+xml';

/**
 * S Hexdump Format
 */
const shf = 'application/shf+xml';

/**
 * SailingTracker
 */
const st = 'application/vnd.sailingtracker.track';

/**
 * Scalable Vector Graphics (SVG)
 */
const svg = 'image/svg+xml';

/**
 * ScheduleUs
 */
const sus = 'application/vnd.sus-calendar';

/**
 * Search/Retrieve via URL Response Format
 */
const sru = 'application/sru+xml';

/**
 * Secure Electronic Transaction - Payment
 */
const setpay = 'application/set-payment-initiation';

/**
 * Secure Electronic Transaction - Registration
 */
const setreg = 'application/set-registration-initiation';

/**
 * Secured eMail
 */
const sema = 'application/vnd.sema';

/**
 * Secured eMail
 */
const semd = 'application/vnd.semd';

/**
 * Secured eMail
 */
const semf = 'application/vnd.semf';

/**
 * SeeMail
 */
const see = 'application/vnd.seemail';

/**
 * Server Normal Format
 */
const snf = 'application/x-font-snf';

/**
 * Server-Based Certificate Validation Protocol - Validation Policies - Request
 */
const spq = 'application/scvp-vp-request';

/**
 * Server-Based Certificate Validation Protocol - Validation Policies - Response
 */
const spp = 'application/scvp-vp-response';

/**
 * Server-Based Certificate Validation Protocol - Validation Request
 */
const scq = 'application/scvp-cv-request';

/**
 * Server-Based Certificate Validation Protocol - Validation Response
 */
const scs = 'application/scvp-cv-response';

/**
 * Session Description Protocol
 */
const sdp = 'application/sdp';

/**
 * Setext
 */
const etx = 'text/x-setext';

/**
 * SGI Movie
 */
const movie = 'video/x-sgi-movie';

/**
 * Shana Informed Filler
 */
const ifm = 'application/vnd.shana.informed.formdata';

/**
 * Shana Informed Filler
 */
const itp = 'application/vnd.shana.informed.formtemplate';

/**
 * Shana Informed Filler
 */
const iif = 'application/vnd.shana.informed.interchange';

/**
 * Shana Informed Filler
 */
const ipk = 'application/vnd.shana.informed.package';

/**
 * Sharing Transaction Fraud Data
 */
const tfi = 'application/thraud+xml';

/**
 * Shell Archive
 */
const shar = 'application/x-shar';

/**
 * Silicon Graphics RGB Bitmap
 */
const rgb = 'image/x-rgb';

/**
 * SimpleAnimeLite Player
 */
const slt = 'application/vnd.epson.salt';

/**
 * Simply Accounting
 */
const aso = 'application/vnd.accpac.simply.aso';

/**
 * Simply Accounting - Data Import
 */
const imp = 'application/vnd.accpac.simply.imp';

/**
 * SimTech MindMapper
 */
const twd = 'application/vnd.simtech-mindmapper';

/**
 * Sixth Floor Media - CommonSpace
 */
const csp = 'application/vnd.commonspace';

/**
 * SMAF Audio
 */
const saf = 'application/vnd.yamaha.smaf-audio';

/**
 * SMAF File
 */
const mmf = 'application/vnd.smaf';

/**
 * SMAF Phrase
 */
const spf = 'application/vnd.yamaha.smaf-phrase';

/**
 * SMART Technologies Apps
 */
const teacher = 'application/vnd.smart.teacher';

/**
 * SourceView Document
 */
const svd = 'application/vnd.svd';

/**
 * SPARQL - Query
 */
const rq = 'application/sparql-query';

/**
 * SPARQL - Results
 */
const srx = 'application/sparql-results+xml';

/**
 * Speech Recognition Grammar Specification
 */
const gram = 'application/srgs';

/**
 * Speech Recognition Grammar Specification - XML
 */
const grxml = 'application/srgs+xml';

/**
 * Speech Synthesis Markup Language
 */
const ssml = 'application/ssml+xml';

/**
 * SSEYO Koan Play File
 */
const skp = 'application/vnd.koan';

/**
 * Standard Generalized Markup Language (SGML)
 */
const sgml = 'text/sgml';

/**
 * StarOffice - Calc
 */
const sdc = 'application/vnd.stardivision.calc';

/**
 * StarOffice - Impress
 */
const sdd = 'application/vnd.stardivision.impress';

/**
 * StarOffice - Writer
 */
const sdw = 'application/vnd.stardivision.writer';

/**
 * StepMania
 */
const sm = 'application/vnd.stepmania.stepchart';

/**
 * Stuffit Archive
 */
const sit = 'application/x-stuffit';

/**
 * Stuffit Archive
 */
const sitx = 'application/x-stuffitx';

/**
 * SudokuMagic
 */
const sdkm = 'application/vnd.solent.sdkm+xml';

/**
 * Sugar Linux Application Bundle
 */
const xo = 'application/vnd.olpc-sugar';

/**
 * Sun Audio - Au file format
 */
const au = 'audio/basic';

/**
 * SundaHus WQ
 */
const wqd = 'application/vnd.wqd';

/**
 * Symbian Install Package
 */
const sis = 'application/vnd.symbian.install';

/**
 * Synchronized Multimedia Integration Language
 */
const smi = 'application/smil+xml';

/**
 * SyncML
 */
const xsm = 'application/vnd.syncml+xml';

/**
 * SyncML - Device Management
 */
const bdm = 'application/vnd.syncml.dm+wbxml';

/**
 * SyncML - Device Management
 */
const xdm = 'application/vnd.syncml.dm+xml';

/**
 * System V Release 4 CPIO Archive
 */
const sv4cpio = 'application/x-sv4cpio';

/**
 * System V Release 4 CPIO Checksum Data
 */
const sv4crc = 'application/x-sv4crc';

/**
 * Systems Biology Markup Language
 */
const sbml = 'application/sbml+xml';

/**
 * Tab Seperated Values
 */
const tsv = 'text/tab-separated-values';

/**
 * Tagged Image File Format
 */
const tiff = 'image/tiff';

/**
 * Tao Intent
 */
const tao = 'application/vnd.tao.intent-module-archive';

/**
 * Tar File (Tape Archive)
 */
const tar = 'application/x-tar';

/**
 * Tcl Script
 */
const tcl = 'application/x-tcl';

/**
 * TeX
 */
const tex = 'application/x-tex';

/**
 * TeX Font Metric
 */
const tfm = 'application/x-tex-tfm';

/**
 * Text Encoding and Interchange
 */
const tei = 'application/tei+xml';

/**
 * Text File
 */
const txt = 'text/plain';

/**
 * TIBCO Spotfire
 */
const dxp = 'application/vnd.spotfire.dxp';

/**
 * TIBCO Spotfire
 */
const sfs = 'application/vnd.spotfire.sfs';

/**
 * Time Stamped Data Envelope
 */
const tsd = 'application/timestamped-data';

/**
 * TRI Systems Config
 */
const tpt = 'application/vnd.trid.tpt';

/**
 * Triscape Map Explorer
 */
const mxs = 'application/vnd.triscape.mxs';

/**
 * troff
 */
const t = 'text/troff';

/**
 * True BASIC
 */
const tra = 'application/vnd.trueapp';

/**
 * TrueType Font
 */
const ttf = 'application/x-font-ttf';

/**
 * Turtle (Terse RDF Triple Language)
 */
const ttl = 'text/turtle';

/**
 * UMAJIN
 */
const umj = 'application/vnd.umajin';

/**
 * Unique Object Markup Language
 */
const uoml = 'application/vnd.uoml+xml';

/**
 * Unity 3d
 */
const unityweb = 'application/vnd.unity';

/**
 * Universal Forms Description Language
 */
const ufd = 'application/vnd.ufdl';

/**
 * URI Resolution Services
 */
const uri = 'text/uri-list';

/**
 * User Interface Quartz - Theme (Symbian)
 */
const utz = 'application/vnd.uiq.theme';

/**
 * Ustar (Uniform Standard Tape Archive)
 */
const ustar = 'application/x-ustar';

/**
 * UUEncode
 */
const uu = 'text/x-uuencode';

/**
 * vCalendar
 */
const vcs = 'text/x-vcalendar';

/**
 * vCard
 */
const vcf = 'text/x-vcard';

/**
 * Video CD
 */
const vcd = 'application/x-cdlink';

/**
 * Viewport+
 */
const vsf = 'application/vnd.vsf';

/**
 * Virtual Reality Modeling Language
 */
const wrl = 'model/vrml';

/**
 * VirtualCatalog
 */
const vcx = 'application/vnd.vcx';

/**
 * Virtue MTS
 */
const mts = 'model/vnd.mts';

/**
 * Virtue VTU
 */
const vtu = 'model/vnd.vtu';

/**
 * Visionary
 */
const vis = 'application/vnd.visionary';

/**
 * Vivo
 */
const viv = 'video/vnd.vivo';

/**
 * Voice Browser Call Control
 */
const ccxml = 'application/ccxml+xml,';

/**
 * VoiceXML
 */
const vxml = 'application/voicexml+xml';

/**
 * WAIS Source
 */
const src = 'application/x-wais-source';

/**
 * WAP Binary XML (WBXML)
 */
const wbxml = 'application/vnd.wap.wbxml';

/**
 * WAP Bitamp (WBMP)
 */
const wbmp = 'image/vnd.wap.wbmp';

/**
 * Waveform Audio File Format (WAV)
 */
const wav = 'audio/x-wav';

/**
 * Web Distributed Authoring and Versioning
 */
const davmount = 'application/davmount+xml';

/**
 * Web Open Font Format
 */
const woff = 'application/x-font-woff';

/**
 * Web Services Policy
 */
const wspolicy = 'application/wspolicy+xml';

/**
 * WebP Image
 */
const webp = 'image/webp';

/**
 * WebTurbo
 */
const wtb = 'application/vnd.webturbo';

/**
 * Widget Packaging and XML Configuration
 */
const wgt = 'application/widget';

/**
 * WinHelp
 */
const hlp = 'application/winhlp';

/**
 * Wireless Markup Language (WML)
 */
const wml = 'text/vnd.wap.wml';

/**
 * Wireless Markup Language Script (WMLScript)
 */
const wmls = 'text/vnd.wap.wmlscript';

/**
 * WMLScript
 */
const wmlsc = 'application/vnd.wap.wmlscriptc';

/**
 * Wordperfect
 */
const wpd = 'application/vnd.wordperfect';

/**
 * Worldtalk
 */
const stf = 'application/vnd.wt.stf';

/**
 * WSDL - Web Services Description Language
 */
const wsdl = 'application/wsdl+xml';

/**
 * X BitMap
 */
const xbm = 'image/x-xbitmap';

/**
 * X PixMap
 */
const xpm = 'image/x-xpixmap';

/**
 * X Window Dump
 */
const xwd = 'image/x-xwindowdump';

/**
 * X.509 Certificate
 */
const der = 'application/x-x509-ca-cert';

/**
 * Xfig
 */
const fig = 'application/x-xfig';

/**
 * XHTML - The Extensible HyperText Markup Language
 */
const xhtml = 'application/xhtml+xml';

/**
 * XML - Extensible Markup Language
 */
const xml = 'application/xml';

/**
 * XML Configuration Access Protocol - XCAP Diff
 */
const xdf = 'application/xcap-diff+xml';

/**
 * XML Encryption Syntax and Processing
 */
const xenc = 'application/xenc+xml';

/**
 * XML Patch Framework
 */
const xer = 'application/patch-ops-error+xml';

/**
 * XML Resource Lists
 */
const rl = 'application/resource-lists+xml';

/**
 * XML Resource Lists
 */
const rs = 'application/rls-services+xml';

/**
 * XML Resource Lists Diff
 */
const rld = 'application/resource-lists-diff+xml';

/**
 * XML Transformations
 */
const xslt = 'application/xslt+xml';

/**
 * XML-Binary Optimized Packaging
 */
const xop = 'application/xop+xml';

/**
 * XPInstall - Mozilla
 */
const xpi = 'application/x-xpinstall';

/**
 * XSPF - XML Shareable Playlist Format
 */
const xspf = 'application/xspf+xml';

/**
 * XUL - XML User Interface Language
 */
const xul = 'application/vnd.mozilla.xul+xml';

/**
 * XYZ File Format
 */
const xyz = 'chemical/x-xyz';

/**
 * YAML Ain't Markup Language / Yet Another Markup Language
 */
const yaml = 'text/yaml';

/**
 * YANG Data Modeling Language
 */
const yang = 'application/yang';

/**
 * YIN (YANG - XML)
 */
const yin = 'application/yin+xml';

/**
 * Z.U.L. Geometry
 */
const zir = 'application/vnd.zul';

/**
 * Zip Archive
 */
const zip = 'application/zip';

/**
 * ZVUE Media Manager
 */
const zmm = 'application/vnd.handheld-entertainment+xml';

/**
 * Zzazz Deck
 */
const zaz = 'application/vnd.zzazz.deck+xml';

var _types = /*#__PURE__*/Object.freeze({
	x3d: x3d,
	_3gp: _3gp,
	_3g2: _3g2,
	mseq: mseq,
	pwn: pwn,
	plb: plb,
	psb: psb,
	pvb: pvb,
	tcap: tcap,
	_7z: _7z,
	abw: abw,
	ace: ace,
	acc: acc,
	acu: acu,
	atc: atc,
	adp: adp,
	aab: aab,
	aam: aam,
	aas: aas,
	air: air,
	swf: swf,
	fxp: fxp,
	pdf: pdf,
	ppd: ppd,
	dir: dir,
	xdp: xdp,
	xfdf: xfdf,
	aac: aac,
	ahead: ahead,
	azf: azf,
	azs: azs,
	azw: azw,
	ami: ami,
	atool: atool,
	apk: apk,
	cii: cii,
	fti: fti,
	atx: atx,
	mpkg: mpkg,
	aw: aw,
	les: les,
	swi: swi,
	s: s,
	atomcat: atomcat,
	atomsvc: atomsvc,
	atom: atom,
	ac: ac,
	aif: aif,
	avi: avi,
	aep: aep,
	dxf: dxf,
	dwf: dwf,
	par: par,
	bcpio: bcpio,
	bin: bin,
	torrent: torrent,
	cod: cod,
	bmi: bmi,
	sh: sh,
	btif: btif,
	rep: rep,
	bz: bz,
	bz2: bz2,
	csh: csh,
	c: c,
	cdxml: cdxml,
	css: css,
	cdx: cdx,
	cml: cml,
	csml: csml,
	cdbcmsg: cdbcmsg,
	cla: cla,
	c4g: c4g,
	sub: sub,
	cdmia: cdmia,
	cdmic: cdmic,
	cdmid: cdmid,
	cdmio: cdmio,
	cdmiq: cdmiq,
	c11amc: c11amc,
	c11amz: c11amz,
	ras: ras,
	csv: csv,
	cpt: cpt,
	wmlc: wmlc,
	cgm: cgm,
	ice: ice,
	cmx: cmx,
	xar: xar,
	cmc: cmc,
	cpio: cpio,
	clkx: clkx,
	clkk: clkk,
	clkp: clkp,
	clkt: clkt,
	clkw: clkw,
	wbs: wbs,
	cryptonote: cryptonote,
	cif: cif,
	cmdf: cmdf,
	cu: cu,
	cww: cww,
	dcurl: dcurl,
	mcurl: mcurl,
	scurl: scurl,
	car: car,
	pcurl: pcurl,
	cmp: cmp,
	dssc: dssc,
	xdssc: xdssc,
	deb: deb,
	uva: uva,
	uvi: uvi,
	uvh: uvh,
	uvm: uvm,
	uvu: uvu,
	uvp: uvp,
	uvs: uvs,
	uvv: uvv,
	dvi: dvi,
	seed: seed,
	dtb: dtb,
	res: res,
	ait: ait,
	svc: svc,
	eol: eol,
	djvu: djvu,
	dtd: dtd,
	mlp: mlp,
	wad: wad,
	dpg: dpg,
	dra: dra,
	dfac: dfac,
	dts: dts,
	dtshd: dtshd,
	dwg: dwg,
	geo: geo,
	es: es,
	mag: mag,
	mmr: mmr,
	rlc: rlc,
	exi: exi,
	mgz: mgz,
	epub: epub,
	eml: eml,
	nml: nml,
	xpr: xpr,
	xif: xif,
	xfdl: xfdl,
	emma: emma,
	ez2: ez2,
	ez3: ez3,
	fst: fst,
	fvt: fvt,
	fbs: fbs,
	fe_launch: fe_launch,
	f4v: f4v,
	flv: flv,
	fpx: fpx,
	npx: npx,
	flx: flx,
	fli: fli,
	ftc: ftc,
	fdf: fdf,
	f: f,
	mif: mif,
	fm: fm,
	fh: fh,
	fsc: fsc,
	fnc: fnc,
	ltf: ltf,
	ddd: ddd,
	xdw: xdw,
	xbd: xbd,
	oas: oas,
	oa2: oa2,
	oa3: oa3,
	fg5: fg5,
	bh2: bh2,
	spl: spl,
	fzs: fzs,
	g3: g3,
	gmx: gmx,
	gtw: gtw,
	txd: txd,
	ggb: ggb,
	ggt: ggt,
	gdl: gdl,
	gex: gex,
	gxt: gxt,
	g2w: g2w,
	g3w: g3w,
	gsf: gsf,
	bdf: bdf,
	gtar: gtar,
	texinfo: texinfo,
	gnumeric: gnumeric,
	kml: kml,
	kmz: kmz,
	gqf: gqf,
	gif: gif,
	gv: gv,
	gac: gac,
	ghf: ghf,
	gim: gim,
	grv: grv,
	gtm: gtm,
	tpl: tpl,
	vcg: vcg,
	h261: h261,
	h263: h263,
	h264: h264,
	hpid: hpid,
	hps: hps,
	hdf: hdf,
	rip: rip,
	hbci: hbci,
	jlt: jlt,
	pcl: pcl,
	hpgl: hpgl,
	hvs: hvs,
	hvd: hvd,
	hvp: hvp,
	sfd_hdstx: sfd_hdstx,
	stk: stk,
	hal: hal,
	html: html,
	irm: irm,
	sc: sc,
	ics: ics,
	icc: icc,
	ico: ico,
	igl: igl,
	ief: ief,
	ivp: ivp,
	ivu: ivu,
	rif: rif,
	spot: spot,
	igs: igs,
	i2g: i2g,
	cdy: cdy,
	xpw: xpw,
	fcs: fcs,
	ipfix: ipfix,
	cer: cer,
	pki: pki,
	crl: crl,
	pkipath: pkipath,
	igm: igm,
	rcprofile: rcprofile,
	irp: irp,
	jad: jad,
	jar: jar,
	_class: _class,
	jnlp: jnlp,
	ser: ser,
	java: java,
	js: js,
	json: json,
	joda: joda,
	jpm: jpm,
	jpeg: jpeg,
	jpgv: jpgv,
	ktz: ktz,
	mmd: mmd,
	karbon: karbon,
	chrt: chrt,
	kfo: kfo,
	flw: flw,
	kon: kon,
	kpr: kpr,
	ksp: ksp,
	kwd: kwd,
	htke: htke,
	kia: kia,
	kne: kne,
	sse: sse,
	lasxml: lasxml,
	latex: latex,
	lbd: lbd,
	lbe: lbe,
	jam: jam,
	_123: _123,
	apr: apr,
	pre: pre,
	nsf: nsf,
	org: org,
	scm: scm,
	lwp: lwp,
	lvp: lvp,
	m3u: m3u,
	m4v: m4v,
	hqx: hqx,
	portpkg: portpkg,
	mgp: mgp,
	mrc: mrc,
	mrcx: mrcx,
	mxf: mxf,
	nbp: nbp,
	ma: ma,
	mathml: mathml,
	mbox: mbox,
	mc1: mc1,
	mscml: mscml,
	cdkey: cdkey,
	mwf: mwf,
	mfm: mfm,
	msh: msh,
	mads: mads,
	mets: mets,
	mods: mods,
	meta4: meta4,
	potm: potm,
	docm: docm,
	dotm: dotm,
	mcd: mcd,
	flo: flo,
	igx: igx,
	es3: es3,
	mdb: mdb,
	asf: asf,
	exe: exe,
	cil: cil,
	cab: cab,
	ims: ims,
	application: application,
	clp: clp,
	mdi: mdi,
	eot: eot,
	xls: xls,
	xlam: xlam,
	xlsb: xlsb,
	xltm: xltm,
	xlsm: xlsm,
	chm: chm,
	crd: crd,
	lrm: lrm,
	mvb: mvb,
	mny: mny,
	pptx: pptx,
	sldx: sldx,
	ppsx: ppsx,
	potx: potx,
	xlsx: xlsx,
	xltx: xltx,
	docx: docx,
	dotx: dotx,
	obd: obd,
	thmx: thmx,
	onetoc: onetoc,
	pya: pya,
	pyv: pyv,
	ppt: ppt,
	ppam: ppam,
	sldm: sldm,
	pptm: pptm,
	ppsm: ppsm,
	mpp: mpp,
	pub: pub,
	scd: scd,
	xap: xap,
	stl: stl,
	cat: cat,
	vsd: vsd,
	wm: wm,
	wma: wma,
	wax: wax,
	wmx: wmx,
	wmd: wmd,
	wpl: wpl,
	wmz: wmz,
	wmv: wmv,
	wvx: wvx,
	wmf: wmf,
	trm: trm,
	doc: doc,
	wri: wri,
	wps: wps,
	xbap: xbap,
	xps: xps,
	mid: mid,
	mpy: mpy,
	afp: afp,
	rms: rms,
	tmo: tmo,
	prc: prc,
	mbk: mbk,
	dis: dis,
	plc: plc,
	mqy: mqy,
	msl: msl,
	txf: txf,
	daf: daf,
	fly: fly,
	mpc: mpc,
	mpn: mpn,
	mj2: mj2,
	mpga: mpga,
	mxu: mxu,
	mpeg: mpeg,
	m21: m21,
	mp4a: mp4a,
	_mp4: _mp4,
	mp4: mp4,
	m3u8: m3u8,
	mus: mus,
	msty: msty,
	mxml: mxml,
	ngdat: ngdat,
	n_gage: n_gage,
	ncx: ncx,
	nc: nc,
	nlu: nlu,
	dna: dna,
	nnd: nnd,
	nns: nns,
	nnw: nnw,
	rpst: rpst,
	rpss: rpss,
	n3: n3,
	edm: edm,
	edx: edx,
	ext: ext,
	gph: gph,
	ecelp4800: ecelp4800,
	ecelp7470: ecelp7470,
	ecelp9600: ecelp9600,
	oda: oda,
	ogx: ogx,
	oga: oga,
	ogv: ogv,
	dd2: dd2,
	oth: oth,
	opf: opf,
	qbo: qbo,
	oxt: oxt,
	osf: osf,
	weba: weba,
	webm: webm,
	odc: odc,
	otc: otc,
	odb: odb,
	odf: odf,
	odft: odft,
	odg: odg,
	otg: otg,
	odi: odi,
	oti: oti,
	odp: odp,
	otp: otp,
	ods: ods,
	ots: ots,
	odt: odt,
	odm: odm,
	ott: ott,
	ktx: ktx,
	sxc: sxc,
	stc: stc,
	sxd: sxd,
	std: std,
	sxi: sxi,
	sti: sti,
	sxm: sxm,
	sxw: sxw,
	sxg: sxg,
	stw: stw,
	otf: otf,
	osfpvg: osfpvg,
	dp: dp,
	pdb: pdb,
	p: p,
	paw: paw,
	pclxl: pclxl,
	efif: efif,
	pcx: pcx,
	psd: psd,
	prf: prf,
	pic: pic,
	chat: chat,
	p10: p10,
	p12: p12,
	p7m: p7m,
	p7s: p7s,
	p7r: p7r,
	p7b: p7b,
	p8: p8,
	plf: plf,
	pnm: pnm,
	pbm: pbm,
	pcf: pcf,
	pfr: pfr,
	pgn: pgn,
	pgm: pgm,
	png: png,
	ppm: ppm,
	pskcxml: pskcxml,
	pml: pml,
	ai: ai,
	pfa: pfa,
	pbd: pbd,
	_pgp: _pgp,
	pgp: pgp,
	box: box,
	ptid: ptid,
	pls: pls,
	str: str,
	ei6: ei6,
	dsc: dsc,
	psf: psf,
	qps: qps,
	wg: wg,
	qxd: qxd,
	esf: esf,
	msf: msf,
	ssf: ssf,
	qam: qam,
	qfx: qfx,
	qt: qt,
	rar: rar,
	ram: ram,
	rmp: rmp,
	rsd: rsd,
	rm: rm,
	mxl: mxl,
	musicxml: musicxml,
	rnc: rnc,
	rdz: rdz,
	rdf: rdf,
	rp9: rp9,
	jisp: jisp,
	rtf: rtf,
	rtx: rtx,
	link66: link66,
	rss: rss,
	shf: shf,
	st: st,
	svg: svg,
	sus: sus,
	sru: sru,
	setpay: setpay,
	setreg: setreg,
	sema: sema,
	semd: semd,
	semf: semf,
	see: see,
	snf: snf,
	spq: spq,
	spp: spp,
	scq: scq,
	scs: scs,
	sdp: sdp,
	etx: etx,
	movie: movie,
	ifm: ifm,
	itp: itp,
	iif: iif,
	ipk: ipk,
	tfi: tfi,
	shar: shar,
	rgb: rgb,
	slt: slt,
	aso: aso,
	imp: imp,
	twd: twd,
	csp: csp,
	saf: saf,
	mmf: mmf,
	spf: spf,
	teacher: teacher,
	svd: svd,
	rq: rq,
	srx: srx,
	gram: gram,
	grxml: grxml,
	ssml: ssml,
	skp: skp,
	sgml: sgml,
	sdc: sdc,
	sdd: sdd,
	sdw: sdw,
	sm: sm,
	sit: sit,
	sitx: sitx,
	sdkm: sdkm,
	xo: xo,
	au: au,
	wqd: wqd,
	sis: sis,
	smi: smi,
	xsm: xsm,
	bdm: bdm,
	xdm: xdm,
	sv4cpio: sv4cpio,
	sv4crc: sv4crc,
	sbml: sbml,
	tsv: tsv,
	tiff: tiff,
	tao: tao,
	tar: tar,
	tcl: tcl,
	tex: tex,
	tfm: tfm,
	tei: tei,
	txt: txt,
	dxp: dxp,
	sfs: sfs,
	tsd: tsd,
	tpt: tpt,
	mxs: mxs,
	t: t,
	tra: tra,
	ttf: ttf,
	ttl: ttl,
	umj: umj,
	uoml: uoml,
	unityweb: unityweb,
	ufd: ufd,
	uri: uri,
	utz: utz,
	ustar: ustar,
	uu: uu,
	vcs: vcs,
	vcf: vcf,
	vcd: vcd,
	vsf: vsf,
	wrl: wrl,
	vcx: vcx,
	mts: mts,
	vtu: vtu,
	vis: vis,
	viv: viv,
	ccxml: ccxml,
	vxml: vxml,
	src: src,
	wbxml: wbxml,
	wbmp: wbmp,
	wav: wav,
	davmount: davmount,
	woff: woff,
	wspolicy: wspolicy,
	webp: webp,
	wtb: wtb,
	wgt: wgt,
	hlp: hlp,
	wml: wml,
	wmls: wmls,
	wmlsc: wmlsc,
	wpd: wpd,
	stf: stf,
	wsdl: wsdl,
	xbm: xbm,
	xpm: xpm,
	xwd: xwd,
	der: der,
	fig: fig,
	xhtml: xhtml,
	xml: xml,
	xdf: xdf,
	xenc: xenc,
	xer: xer,
	rl: rl,
	rs: rs,
	rld: rld,
	xslt: xslt,
	xop: xop,
	xpi: xpi,
	xspf: xspf,
	xul: xul,
	xyz: xyz,
	yaml: yaml,
	yang: yang,
	yin: yin,
	zir: zir,
	zip: zip,
	zmm: zmm,
	zaz: zaz
});

/* globals */

/**
 * @type {CONSTSCODES}
 */
const codes = _codes;

	/**
	 * @type {CONSTSHEADERS}
	 */
const headers = _headers;

/**
 * @type {CONSTSMETHODS}
 */
const methods = _methods;

/**
 * @type {CONSTSTYPES}
 */
const types = _types;

exports.codes = codes;
exports.headers = headers;
exports.methods = methods;
exports.types = types;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
